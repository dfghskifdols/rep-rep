import logging
import traceback
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.types import Message
from aiogram.contrib.middlewares.logging import LoggingMiddleware

# –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = '7705193251:AAH_ourDVEerK6BIPZQTd_oZuFz7EingxrQ'

# chat_id –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π chat_id)
ADMIN_GROUP_CHAT_ID = 2651165474

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report
@dp.message_handler(commands=['report'])
async def handle_report(message: Message):
    report_text = message.get_args()

    if not report_text:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, –∫–æ–≥–æ –∏ –∑–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: `/report –°–ø–∞–º`")
        return

    try:
        report_message = f"üö® **–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏!** üö®\n\n" \
                         f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {message.from_user.full_name}\n" \
                         f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {message.from_user.id}\n" \
                         f"**–ü—Ä–∏—á–∏–Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è:** {report_text}\n" \
                         f"**–î–∞—Ç–∞:** {message.date.strftime('%Y-%m-%d %H:%M:%S')}"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å chat_id: {ADMIN_GROUP_CHAT_ID}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await bot.send_message(ADMIN_GROUP_CHAT_ID, report_message, parse_mode=ParseMode.MARKDOWN)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply("–í–∞—à —Ä–µ–ø–æ—Ä—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!")

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–ø–æ—Ä—Ç–∞: {e}")
        traceback.print_exc()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–ø–æ—Ä—Ç–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(content_types=['text'])
async def get_chat_id(message: Message):
    print(f"Chat ID: {message.chat.id}")  # –í—ã–≤–µ–¥–µ—Ç chat_id –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
