import asyncio
import nest_asyncio
import html
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import logging
from flask import Flask
from threading import Thread

nest_asyncio.apply()

API_TOKEN = '7705193251:AAEuxkW63TtCcXwizvAYUuoI7jH1570NgNU'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_CHAT_ID = -1002651165474  # ID –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
USER_CHAT_ID = 5283100992  # –í–∞—à ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–°

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(API_TOKEN)
app = Application.builder().token(API_TOKEN).build()

flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "Bot is running"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /report –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.")

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–ø–æ—Ä—Ç
    message_id = update.message.message_id
    user_id = update.message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ—Ä—Ç–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback)
    context.user_data['report_user_id'] = user_id
    context.user_data['report_message_id'] = message_id

    keyboard = [[
        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_report_{user_id}_{message_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_report_{user_id}_{message_id}")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç?", reply_markup=reply_markup)

async def handle_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    logger.info(f"Callback data: {query.data}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç —Ñ–æ—Ä–º–∞—Ç "action_user_id_message_id"
    try:
        data = query.data.split('_')
        action = data[0]
        user_id = int(data[1])
        message_id = int(data[2])

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"Parsed data - Action: {action}, User ID: {user_id}, Message ID: {message_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ —á–µ–ª–æ–≤–µ–∫, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–ø–æ—Ä—Ç
        if query.from_user.id != user_id:
            await query.message.edit_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç!")
            return

        if action == "confirm_report":
            await confirm_report(update, context, user_id, message_id)
        elif action == "cancel_report":
            await cancel_report(update, context, user_id, message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –¥–∞–Ω–Ω—ã—Ö: {e}")
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def confirm_report(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, message_id: int):
    query = update.callback_query
    await query.answer()

    try:
        original_message = await query.message.chat.get_message(message_id)
        reported_message = original_message.reply_to_message
        reported_user = reported_message.from_user

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        chat = query.message.chat
        if chat.username:
            message_link = f"https://t.me/{chat.username}/{reported_message.message_id}"
            link_text = f"<a href='{message_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>"
        else:
            link_text = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

        # –¶–∏—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = html.escape(reported_message.text) if reported_message.text else "(–º–µ–¥–∏–∞-—Ñ–∞–π–ª)"
        reported_user_mention = f"<b>{html.escape(reported_user.full_name)}</b> (@{reported_user.username})"

        # –¢–µ–∫—Å—Ç —Ä–µ–ø–æ—Ä—Ç–∞
        report_text = (
            f"‚ö†Ô∏è <b>–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {reported_user_mention}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n<blockquote>{message_text}</blockquote>\n"
            f"{link_text}"
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await bot.get_chat_administrators(ADMIN_CHAT_ID)
        admin_mentions = [f"@{admin.user.username}" for admin in admins if admin.user.username]

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        mid = len(admin_mentions) // 2
        first_half = admin_mentions[:mid]
        second_half = admin_mentions[mid:]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç
        await bot.send_message(
            ADMIN_CHAT_ID, report_text,
            parse_mode=ParseMode.HTML,
            protect_content=True,
            disable_web_page_preview=True
        )

        # –ü–∏–Ω–≥—É–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –∞–¥–º–∏–Ω–æ–≤
        if first_half:
            await bot.send_message(
                ADMIN_CHAT_ID, f"üë• –ü–∏–Ω–≥ –∞–¥–º–∏–Ω–æ–≤ (1-—è —á–∞—Å—Ç—å): {' '.join(first_half)}",
                parse_mode=ParseMode.HTML,
                protect_content=True,
                disable_web_page_preview=True
            )

        # –ü–∏–Ω–≥—É–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É –∞–¥–º–∏–Ω–æ–≤
        if second_half:
            await bot.send_message(
                ADMIN_CHAT_ID, f"üë• –ü–∏–Ω–≥ –∞–¥–º–∏–Ω–æ–≤ (2-—è —á–∞—Å—Ç—å): {' '.join(second_half)}",
                parse_mode=ParseMode.HTML,
                protect_content=True,
                disable_web_page_preview=True
            )

        await query.message.edit_text("‚úÖ –†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–ø–æ—Ä—Ç–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cancel_report(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, message_id: int):
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ —á–µ–ª–æ–≤–µ–∫, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–ø–æ—Ä—Ç
    if query.from_user.id != user_id:
        await query.message.edit_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç!")
        return
    
    await query.message.edit_text("‚ùå –†–µ–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.")

async def notify_user_on_shutdown():
    try:
        await bot.send_message(USER_CHAT_ID, "üëã –ú–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω... –ø—Ä–æ—â–∞–π—Ç–µ")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {e}")

async def notify_user_on_start():
    try:
        await bot.send_message(USER_CHAT_ID, "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω!")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

async def main():
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("report", report_command))
    app.add_handler(CallbackQueryHandler(handle_report))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await notify_user_on_start()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await app.run_polling()

    await notify_user_on_shutdown()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π

if __name__ == '__main__':
    Thread(target=lambda: flask_app.run(host='0.0.0.0', port=8080)).start()

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
