import nest_asyncio
import asyncio
import logging
import random
import re
import string
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from urllib.parse import urlparse
from telegram import CopyTextButton
import sqlite3
import pytz
import time
import aiopg
import asyncpg
import math
from pytz import timezone
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import json

moscow_tz = timezone('Europe/Moscow')
current_time = datetime.now(moscow_tz)
hour = current_time.hour

bot_paused_until = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –Ω–∞–ø–∏—Å–∞–ª–∏ "–†–µ–ø–æ—Ä—Ç-–±–æ—Ç-–≤–æ–ø—Ä–æ—Å"
waiting_for_question = set()

nest_asyncio.apply()

REPORTS_PER_PAGE = 3
API_TOKEN = '7705193251:AAFrnXeNBgiFo3ZQsGNvEOa2lNzQPKo3XHM'
ADMIN_CHAT_ID = -1002651165474
USER_CHAT_ID = 5283100992
ALLOWED_USER_IDS = [5283100992, 5344318601, 5713511759]
LOG_CHAT_ID = -1002411396364
ALLOWED_USERS = [5283100992, 5713511759, 5344318601, 6340673182]
ADMINS_ALLOWED = [5283100992, 5713511759, 5344318601, 6340673182, 1385118926, 5222780613, 6139706645]
GROUP_ID = -1002268486160
LOG_CHATDEL_ID = -4665694960

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(API_TOKEN)
app = Application.builder().token(API_TOKEN).build()

# –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ "–†–∞–§–∞"
rafa_responses = [
    "<b>Blue_Nexus –∏–Ω–æ–≥–¥–∞ —Å—Ç–∞–µ—Ç –µ–±–ª–∞–Ω–æ–º</b>", 
    "<b>Blue_Nexus –¥–µ—Ä–∂–∞—Ç –≤ —Ä–∞–±—Å—Ç–≤–µ</b>",  
    "<b>Blue_Nexus –∞–±–∞–∂–∞–µ—Ç —á–∞—Ç –≥–ø—Ç</b>",
    "<b>–ö–∏—Ä–∏—á –ª—é–±–∏—Ç –∞–Ω–∏–º–µ-—Ç—è–Ω–æ–∫... –Ω–æ –≤ –∂–∏–∑–Ω–∏ –¥–µ–≤—É—à–µ–∫ –æ–Ω –Ω–µ –ª—é–±–∏—Ç</b>", 
    "<b>–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ö–∏—Ä–∏—á —Å–æ–∑–¥–∞–≤–∞–ª –∫–∞–Ω–∞–ª –ø—Ä–æ —Å–≤–æ—é –∂–∏–∑–Ω—å</b>", 
    "<b>–ö–∏—Ä–∏—á –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π</b>",
    "<b>Freezee - —É—Å–ø–µ—Ö —É—Å–ø–µ—à–Ω—ã–π</b>", 
    "<b>Freezee - –∞–Ω—Ç–∏–ø–∞—Ü–∏—Ñ–∏—Å—Ç‚òÆ</b>", 
    "<b>Freezee –ø–æ—Ö—É–∏—Å—Ç –ø–æ –∂–∏–∑–Ω–∏</b>",
    "<b>Vipsii - –¥–æ–ª–±–∞–µ–±</b>", 
    "<b>Vipsii —Å–ª–∏—à–∫–æ–º –≥–ª—É–ø—ã–π</b>", 
    "<b>–¢—Ä–µ—Ç–∏–π —Ñ–∞–∫—Ç –ø—Ä–æ —Å–µ–±—è Vipsii –∑–∞–±—ã–ª</b>", 
    "<b>Exponnentik - –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å —á–∞—è</b>", 
    "<b>Exponnentik –¥–µ—Ä–∂–∏—Ç —á–µ—Ä–∏ –≤ –∑–∞–ª–æ–∂–Ω–∏–∫–∞—Ö</b>", 
    "<b>Exponnentik –≥–ª–∞–≤–Ω—ã–π –ø—É–ø—Å –∫–∏—Ä–∏—á–∞(–∫–∏—Ä–∏—á —ç—Ç–æ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç)</b>",
    "<b>–†–∞–§–∞ - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –†–∞–Ω–¥–æ–º –§–∞–∫—Ç –ø—Ä–æ –ê–Ω–¥–º–∏–Ω–æ–≤</b>"
]
  
# –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è "–†–∞–§—É"
rafu_responses = [
    "<b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç! SsVladiSlaveSs –Ω–µ –∑–Ω–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–∫—Ç</b>", 
    "<b>–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ @khvtg –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã–π –∏–≥—Ä–æ–∫, —Ö–æ—Ä–æ—à–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —â–µ–¥—Ä—ã–π —Å–æ–≥–∏–ª—å–¥–∏–µ—Ü –∏ –∫—Ä—É—Ç–æ–π –¥–∏–∑–∞–π–Ω–µ—Ä ‚Äì –æ–Ω –µ—â–µ –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Å–∫—Ä–æ–º–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å</b>", 
    "<b>#–•–∞—é—à#–ë–æ–π.#—Ç–≤–∏–∫–∞—Ç#Not –•–æ—á–µ—Ç —É–º–µ—Ä–µ—Ç—å –æ—Ç —Å–≤–æ–µ–π –¥—É—à–∏</b>",
    "<b>–ë–æ–º–±–∞–±–æ—Ç –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ –±–æ—Çüôà</b>",
    "<b>–û –ø—É—à–æ—á–∫–µ: 11 –ª–µ—Ç, –≥–µ–π, –∏—â–µ—Ç –∂–µ–Ω—É</b>",
    "<b>–ù–∏–Ω–¥–∑—è - –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ—Ä</b>",
    "<b>–¢–∏—Ö–∏–π_–°–æ–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –º–∏—Ä–∞–∂ –æ—Å—Ç—Ä–æ–≤ –∏ –Ω–∞ –Ω–µ–º —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É –¥–ª—è –≤4 —Ä–∞—Å –≤ –±–ª–æ–∫—Å —Ñ—Ä—É–∫—Ç</b>",
    "<b>Vloger –ø—Ä–æ —Å–µ–±—è: —è —Å—Ç—É–¥–µ–Ω—Ç –∏ –æ—á–µ–Ω—å —Ç–∞—â—É—Å –ø–æ –∞–Ω–∏–º–µ —Ç—è–Ω–∫–∞–º –Ω–æ –≤ —Ä–∏–ª–µ –¥–µ–≤—É—à–µ–∫ –±–æ—é—Å—å</b>",
    "<b>StrazhTellOffichal –û—á–µ–Ω—å –ª—é–±–∏—Ç –Æ–Ω–∏, —á—Ç–æ –æ–Ω –¥–∞–∂–µ —Å–æ–∑–¥–∞–ª —Å–≤–æ–π –∫—É–ª—å—Ç –ø–æ —Å–≤–æ–µ–π –ª—é–±–∏–º–æ–π –∫–æ—à–∫–µ Uni Cat</b>",
    "<b>Mapc - –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π Python-–∞–π—Ç–∏—à–Ω–∏–∫ —Å –±–æ–ª—å—à–∏–º —Å—Ç–∞–∂–æ–º –≤–∞–ª—è–Ω–∏—è –Ω–∞ –∫—Ä–æ–≤–∞—Ç–∏... –Ω–∞–∫–æ—Ä–º–∏—Ç–µ –µ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞</b>",
    "<b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –≤—Å—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è ‚Äî —ç—Ç–æ –ø–æ–¥–≤–∞–ª, –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî danyagreench.</b>",
    "<b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç, SsVladiSlaveSs —ç—Ç–æ SsVladiSlaveSs</b>",
    "<b>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ª—é–±–∏—Ç –∫–æ—Ç–∏–∫–æ–≤</b>",
    "<b>–ü—Ä–æ—Å—Ç–æ —á–µ–ª - –≥–µ–π</b>",
    "<b>–ö–æ—Ç –∞–Ω–∞–Ω–∞—Å —Å—Ç–∞–ª –∞–Ω–∞–Ω–∞—Å–æ–º –∫–æ–≥–¥–∞ –Ω–∞ –µ–≥–æ –≥–æ–ª–æ–≤—É —Å–≤–∞–ª–∏–ª—Å—è –∞–Ω–∞–Ω–∞—Å</b>",
    "<b>üêç…•…•∆é –æ—á–µ–Ω—å –±–æ–∏—Ç—Å—è —Å–æ–±–∞–∫</b>",
    "<b>–£ –õ—é—Ü–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è —ç–∫–∑–∞–º–µ–Ω</b>",
    "<b>–†–∞–§—É - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –†–ê–Ω–¥–æ–º –§–∞–∫—Ç –ø—Ä–æ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>"
]

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∏—á–∏–Ω—ã —Ä–µ–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü1.3", "–ø1.3")
REPORT_REASON_REGEX = re.compile(r"^–ø\d+\.\d+$", re.IGNORECASE)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—É –∑–∞ –∫–ª—é—á–µ–º
async def get_report_by_key(report_key):
    conn = await connect_db()
    report = await conn.fetchrow('''
        SELECT * FROM user_reports WHERE report_key = $1
    ''', report_key)
    await conn.close()
    return report

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–µ–ø–æ—Ä—Ç—É
async def update_report_status(report_key, status, accepted_by=None):
    conn = await connect_db()
    await conn.execute('''
        UPDATE user_reports
        SET status = $1, accepted_by = $2
        WHERE report_key = $3
    ''', status, accepted_by, report_key)
    await conn.close()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ –≥—Ä—É–ø–ø—É
async def log_action(text: str):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ª–æ–≥-–≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª
        await bot.send_message(LOG_CHAT_ID, text, parse_mode=ParseMode.HTML)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")

async def accept_report(update, context):
    user_id = update.message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMINS_ALLOWED:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–∞–¥–∞–Ω–æ –∫–ª—é—á —Ä–µ–ø–æ—Ä—Ç—É
    if len(context.args) == 0:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∏–º–µ—Ä: /accept {–∫–ª—é—á —Ä–µ–ø–æ—Ä—Ç—É}")
        return

    report_key = context.args[0]  # –ö–ª—é—á —Ä–µ–ø–æ—Ä—Ç—É –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–∏

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–ø–æ—Ä—Ç –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞ –∫–ª—é—á–µ–º
    report = await get_report_by_key(report_key)
    if not report:
        await update.message.reply_text(f"‚ùå –†–µ–ø–æ—Ä—Ç —Å –∫–ª—é—á–æ–º {report_key} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ä–µ–ø–æ—Ä—Ç –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏–π
    if report['status'] == 'accepted':
        await update.message.reply_text(f"‚ùå –†–µ–ø–æ—Ä—Ç —Å –∫–ª—é—á–æ–º {report_key} —É–∂–µ –ø—Ä–∏–Ω—è—Ç!")
        return

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–µ–ø–æ—Ä—Ç—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    try:
        await update_report_status(report_key, 'accepted', str(user_id))
        await update.message.reply_text(f"‚úÖ –†–µ–ø–æ—Ä—Ç —Å –∫–ª—é—á–æ–º {report_key} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±–∫–µ: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—É –∑–∞ –∫–ª—é—á–µ–º
async def delete_report(update: Update, context: CallbackContext):
    if update.message.from_user.id not in ALLOWED_USER_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ!.")
        return

    if not context.args:
        await update.message.reply_text("„ÄΩÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á —Ä–µ–ø–æ—Ä—Ç–∞. –ü—Ä–∏–º–µ—Ä: /delete_report 12345_67890")
        return

    report_key = context.args[0]
    conn = await connect_db()
    result = await conn.execute("DELETE FROM user_reports WHERE report_key = $1", report_key)
    await conn.close()

    if result == "DELETE 1":
        await update.message.reply_text(f"‚ùáÔ∏è –†–µ–ø–æ—Ä—Ç —Å –∫–ª—é—á–æ–º <code>{report_key}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç —Å –∫–ª—é—á–æ–º <code>{report_key}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
async def bot_stop(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    if user_id in ALLOWED_USER_IDS:
        try:
            minutes = int(context.args[0])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            stop_time = time.time() + minutes * 60  # –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            await update.message.reply_text(f"üí§ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
            
            # –ñ–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
            await asyncio.sleep(minutes * 60)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            await update.message.reply_text("üõú –ë–æ—Ç —Å–Ω–æ–≤–∞ –∑–∞–ø—É—â–µ–Ω.")
        except (IndexError, ValueError):
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö). –ü—Ä–∏–º–µ—Ä: /bot_stop 5")
    else:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL
async def connect_db():
    return await asyncpg.connect(
        dsn='postgresql://neondb_owner:npg_PXgGyF7Z5MUJ@ep-shy-feather-a2zlgfcw-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require'
    )

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
async def get_reports(page=1, reports_per_page=3):
    conn = await connect_db()
    offset = (page - 1) * reports_per_page
    rows = await conn.fetch(''' 
        SELECT * FROM user_reports
        ORDER BY report_date DESC
        LIMIT $1 OFFSET $2
    ''', reports_per_page, offset)
    await conn.close()
    return rows

# –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–ø–æ—Ä—Ç—ñ–≤
async def get_total_reports():
    conn = await connect_db()
    total_reports = await conn.fetchval('SELECT COUNT(*) FROM user_reports')
    await conn.close()
    return total_reports

# –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–ø–æ—Ä—Ç–∏
async def show_reports(update, context, page=1):
    user_id = (
        update.effective_user.id if update.effective_user else None
    )

    if user_id not in ALLOWED_USERS:
        if update.message:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ.")
        else:
            await update.callback_query.answer("‚õî –¢–µ–±–µ –Ω–µ–ª—å–∑—è", show_alert=True)
        return

    reports = await get_reports(page)
    total_reports = await get_total_reports()
    total_pages = math.ceil(total_reports / 3)

    if not reports:
        if update.message:
            await update.message.reply_text("üåê –ù–µ—Ç—É —Ä–µ–ø–æ—Ä—Ç–æ–≤.")
        else:
            await update.callback_query.message.reply_text("üåê –ù–µ—Ç—É —Ä–µ–ø–æ—Ä—Ç–æ–≤")
        return

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑—É
    message_text = "–°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤:\n\n"
    for report in reports:
        status = report.get('status', 'not accepted')
        accepted_by = report.get('accepted_by')

        message_text += f"üîë–ö–ª—é—á —Ä–µ–ø–æ—Ä—Ç–∞: <code>{report['report_key']}</code>\n"
        message_text += f"üÜîID —é–∑–µ—Ä–∞: {report['user_id']}\n"
        message_text += f"üì©ID —Å–æ–æ–±—â–µ–Ω–∏—è: {report['message_id']}\n"
        message_text += f"üî®–ö—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª: {report['reporter_name']}\n"
        message_text += f"ü§ï–ù–∞ –∫–æ–≥–æ: {report['reported_name']}\n"
        message_text += f"üîó–°—Å—ã–ª–∫–∞: {report['message_link']}\n"
        message_text += f"‚åöÔ∏è–í—Ä–µ–º—è: {report['report_time']}\n"
        message_text += f"üí≠–¢–µ–∫—Å—Ç: {report['reported_text']}\n"

        if status == "accepted":
            message_text += f"‚úÖ –°—Ç–∞—Ç—É—Å: –ø—Ä–∏–Ω—è—Ç (–∞–¥–º–∏–Ω: {accepted_by})\n\n"
        else:
            message_text += f"üïê –°—Ç–∞—Ç—É—Å: –Ω–µ –ø—Ä–∏–Ω—è—Ç\n\n"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard = []
    buttons = []
    if page > 1:
        buttons.append(InlineKeyboardButton("‚Üê", callback_data=f"page_{page - 1}"))

    buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))

    if page < total_pages:
        buttons.append(InlineKeyboardButton("‚Üí", callback_data=f"page_{page + 1}"))

    keyboard.append(buttons)
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    if update.message:
        print(f"Replying with message: {message_text}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True,
            parse_mode=ParseMode.HTML  # –¥–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ HTML
        )
    else:
        print(f"Editing message: {message_text}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        await update.callback_query.message.edit_text(
            message_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True,
            parse_mode=ParseMode.HTML  # –¥–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ HTML
        )

async def button(update, context):
    query = update.callback_query
    data = query.data

    if data.startswith("page_"):
        page = int(data.split("_")[1])
        await show_reports(update, context, page=page)
        await query.answer()

    print("test")

# –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
async def save_report(user_id, message_id, reason, reporter_name, reported_name, message_link, reported_text, report_date):
    conn = await connect_db()
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ú–°–ö
    report_time = datetime.now(moscow_tz).replace(tzinfo=None)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è report_key –Ω–∞ –æ—Å–Ω–æ–≤—ñ user_id —Ç–∞ message_id
    report_key = f"{user_id}_{message_id}"

# –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π —Ä–µ–ø–æ—Ä—Ç –∑ —É—Å—ñ–º–∞ –¥–∞–Ω–∏–º–∏ –≤ —Ç–∞–±–ª–∏—Ü—é, –¥–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
    await conn.execute(''' 
        INSERT INTO user_reports (report_key, user_id, message_id, reporter_name, reported_name, message_link, report_time, reported_text, report_date, status)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, 'pending')  -- —Å—Ç–∞—Ç—É—Å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    ''', report_key, user_id, message_id, reporter_name, reported_name, message_link, report_time, reported_text, report_date)

    await conn.close()

confirmed_reports = set()

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–ø–æ—Ä—Ç—É
async def report_command(update: Update, context: CallbackContext):
    if not update.message.reply_to_message:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–†–µ–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ <i>–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>!</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ä–µ–ø–æ—Ä—Ç–∞: <code>/report –ü1.3</code>",
            parse_mode=ParseMode.HTML
        )
        return

    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ —Ä–µ–ø–æ—Ä—Ç–∞!</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ä–µ–ø–æ—Ä—Ç–∞: <code>/report –ü1.3</code>",
            parse_mode=ParseMode.HTML
        )
        return

    reason = context.args[0].lower()  # <- –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    message = update.message  # –æ—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ update
    message_id = update.message.reply_to_message.message_id
    user_id = update.message.from_user.id
    report_key = f"{user_id}_{message_id}"
    reporter_name = update.message.from_user.full_name
    reported_name = update.message.reply_to_message.from_user.full_name
    message_link = f"https://t.me/{update.message.chat.username}/{message_id}"
    report_time = update.message.date
    reported_text = update.message.reply_to_message.text

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î forward_date —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, —è–∫—â–æ –Ω–µ–º–∞—î - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ date
    report_date = message.forward_date if hasattr(message, 'forward_date') else message.date
    report_date = report_date.replace(tzinfo=None)

    if report_key in confirmed_reports:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
        return

    keyboard = [[
             InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{user_id}_{message_id}"),
             InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_{user_id}_{message_id}")
         ]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üîä–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
    if reason != "–ø1.0":
         await save_report(user_id, message_id, reason, reporter_name, reported_name, message_link, reported_text, report_date)
    await log_action(f"üìå –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª {update.message.from_user.full_name} ({user_id}) —Å –ø—Ä–∏—á–∏–Ω–æ–π {reason}")

# –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—É
async def handle_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    data = query.data.split("_")
    if len(data) < 3:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return

    action = data[0]
    try:
        user_id = int(data[1])
        message_id = int(data[2])
    except ValueError:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞!")
        return

    if query.from_user.id != user_id:
        await query.answer(text="‚ùå –ù–µ–ª—å–∑—è –∂–º—è–∫–∞—Ç—å —á—É–∂–∏–µ —Ä–µ–ø–æ—Ä—Ç—ã!", show_alert=True)
        return

    report_key = f"{user_id}_{message_id}"
    if report_key in confirmed_reports:
        await query.answer(text="‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)
        return

    if action == "confirm":
        reported_message = query.message.reply_to_message
        reported_user = reported_message.from_user

        if query.message.chat.username:
            message_link = f"https://t.me/{query.message.chat.username}/{reported_message.message_id}"
            link_text = f"<a href='{message_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>"
        else:
            link_text = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

        message_text = reported_message.text if reported_message.text else "(–º–µ–¥–∏–∞-—Ñ–∞–π–ª)"
        reported_user_mention = f"<b>{reported_user.full_name}</b> (@{reported_user.username})"

        report_text = (
            f"<blockquote>‚ö†Ô∏è <b>–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç!</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {reported_user_mention}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<blockquote>{message_text}</blockquote>\n</blockquote>"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {link_text}\n"
            f"üîë <b>–ö–ª—é—á —Ä–µ–ø–æ—Ä—Ç—É:</b> <code>{report_key}</code>" 
        )

        await query.message.edit_text("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...")

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await bot.get_chat_administrators(ADMIN_CHAT_ID)
        admin_mentions = [f"@{admin.user.username}" for admin in admins if admin.user.username]

        await bot.send_message(
            ADMIN_CHAT_ID, report_text,
            parse_mode=ParseMode.HTML,
            protect_content=True,
            disable_web_page_preview=True
        )

        # –î–æ–¥–∞—î–º–æ –∫–≤–∏—Ç–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ –ë–î –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–µ–º—ñ—É–º—É
        conn = await connect_db()
        is_banned = await conn.fetchval("SELECT banned FROM banned_users WHERE user_id = $1", reported_user.id)

        if is_banned is None or not is_banned:
            user = await conn.fetchrow("SELECT premium_until FROM user_tickets WHERE user_id = $1", reported_user.id)
            now = datetime.utcnow()
            is_premium = user and user["premium_until"] and user["premium_until"] > now
            multiplier = 2 if is_premium else 1

            await conn.execute("""
                INSERT INTO user_tickets (user_id, tickets)
                VALUES ($1, $2)
                ON CONFLICT (user_id)
                DO UPDATE SET tickets = user_tickets.tickets + $2
            """, reported_user.id, multiplier)

        await conn.close()

    if admin_mentions:
        # –î—ñ–ª–∏–º–æ –Ω–∞ 3 —á–∞—Å—Ç–∏–Ω–∏
        third = len(admin_mentions) // 3
        part1 = admin_mentions[:third]
        part2 = admin_mentions[third:third*2]
        part3 = admin_mentions[third*2:]

        await asyncio.sleep(4)
        await bot.send_message(ADMIN_CHAT_ID, "üîî 1: " + " ".join(part1))
        await asyncio.sleep(4)
        await bot.send_message(ADMIN_CHAT_ID, "üîî 2: " + " ".join(part2))
        await asyncio.sleep(4)
        await bot.send_message(ADMIN_CHAT_ID, "üîî 3: " + " ".join(part3))

        confirmed_reports.add(report_key)
        await query.message.edit_text("‚úÖ–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        await log_action(f"‚úÖ –†–µ–ø–æ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.full_name} ({query.from_user.id})")
    elif action == "cancel":
        await query.message.edit_text("‚ùå –†–µ–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        await log_action(f"‚ùå –†–µ–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.full_name} ({query.from_user.id})")

# –§—É–Ω–∫—Ü–∏—è –æ–¥–µ—Ä–∂–∞–Ω–∏—è ID —á–∞—Ç—É
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    # –Æ–∑–∞–µ–º InlineKeyboardButton –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID
    button = InlineKeyboardButton(text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", copy_text=CopyTextButton(text=chat_id))
    keyboard = [[button]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}", parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

# –û–±—Ä–æ–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Copy ID
async def handle_copy_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.data.split('_')[1]
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å

# –ö–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ
    await query.edit_message_text(f"‚úÖ ID —á–∞—Ç–∞: {chat_id} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip().lower()  # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ –º–∞–ª–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä
    user_id = update.message.from_user.id

    # –û–±—Ä–æ–±–∫–∞ –æ–±–æ—Ö –∫–æ–º–∞–Ω–¥
    if message in ["—Ä–±–≤", "—Ä–µ–ø–æ—Ä—Ç –±–æ—Ç –≤–æ–ø—Ä–æ—Å"]:
        if user_id not in waiting_for_question:
            waiting_for_question.add(user_id)
            await update.message.reply_text("–°–ª—É—à–∞—é! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
            asyncio.create_task(wait_for_response(user_id, update.message.chat_id, context))
        else:
            await update.message.reply_text("‚è≥ –Ø —É–∂–µ –∂–¥—É –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ!")
        return

    elif user_id in waiting_for_question:
        waiting_for_question.remove(user_id)
        admin_id = 5283100992  # –¢–≤—ñ–π Telegram ID
        try:
            await context.bot.send_message(chat_id=admin_id, text=f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å @{update.message.from_user.username or update.message.from_user.first_name}:\n\n{message}")
            await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await update.message.reply_text("‚ùå –°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return

    elif message in ["–Ω–µ–∫–æ", "–≥–¥–µ –Ω–µ–∫–æ"]:
        admins = await context.bot.get_chat_administrators(ADMIN_CHAT_ID)
        if admins:
            random_admin = random.choice(admins)
            random_username = random_admin.user.username if random_admin.user.username else "unknown_user"
            sent_message = await update.message.reply_text("–≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∏ –ø–æ –∞–π–ø–∏üíª")
            await asyncio.sleep(2)
            await sent_message.edit_text(f"–ö–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∞! –û–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É @{random_username}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π!")

    elif message == "–ø–∏–Ω–≥":
        await update.message.reply_text("–ê –Ω–∞—Ö—É—è –æ–Ω —Ç–µ–±–µ?")

    elif message in ["—Ä–∞—Ñ–∞", "—Ä–∞–Ω–¥–æ–º —Ñ–∞–∫—Ç –∞–¥–º–∏–Ω"]:
        response = random.choice(rafa_responses)
        await update.message.reply_text(f"<b>{response}</b>", parse_mode=ParseMode.HTML)
    
    elif message in ["—Ä–∞—Ñ—É", "—Ä–∞–Ω–¥–æ–º —Ñ–∞–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏"]:
        response = random.choice(rafu_responses)  # –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –†–∞–§—É
        await update.message.reply_text(response, parse_mode=ParseMode.HTML)

    elif message.lower() == "—Ç–æ–ø –ø—Ä–ø":
        conn = await connect_db()  # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î

        rows = await conn.fetch(""" 
            SELECT accepted_by, COUNT(*) AS count
            FROM user_reports
            WHERE status = 'accepted'
            GROUP BY accepted_by
            ORDER BY count DESC
            LIMIT 10
        """)

        all_rows = await conn.fetch(""" 
            SELECT accepted_by, COUNT(*) AS count
            FROM user_reports
            WHERE status = 'accepted'
            GROUP BY accepted_by
            ORDER BY count DESC
        """)

        current_user_id = update.message.from_user.id
        leaderboard = "<b>üèÜ –¢–æ–ø 10 –∞–¥–º–∏–Ω–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤:</b>\n"

        for idx in range(10):
            if idx < len(rows):
                user_id = int(rows[idx]["accepted_by"])
                count = rows[idx]["count"]

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–µ–º—ñ—É–º —Å—Ç–∞—Ç—É—Å
                premium_until_row = await conn.fetchrow("""
                    SELECT premium_until FROM user_tickets WHERE user_id = $1
                """, user_id)

                # –Ø–∫—â–æ –ø–æ–ª–µ premium_until —î —ñ –¥–∞—Ç–∞ –±—ñ–ª—å—à–µ –ø–æ—Ç–æ—á–Ω–æ—ó
                if premium_until_row and premium_until_row["premium_until"] > datetime.now():
                    premium_icon = "üíé"  # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–æ–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø—Ä–µ–º—ñ—É–º
                else:
                    premium_icon = ""  # –Ø–∫—â–æ –ø—Ä–µ–º—ñ—É–º –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π

                try:
                    user = await bot.get_chat(user_id)
                    name = user.full_name
                    link = f"<a href='tg://user?id={user_id}'>{premium_icon} {name}</a>"
                except:
                    link = f"<code>{user_id}</code>"

                if user_id == current_user_id:
                    leaderboard += f"<b>{idx + 1} - {link} ‚Äî {count} üìç</b>\n"
                else:
                    leaderboard += f"{idx + 1} - {link} ‚Äî {count} üìç\n"
            else:
                leaderboard += f"{idx + 1} - \n"

        if current_user_id not in ADMINS_ALLOWED:
            leaderboard += "\nüôÖ‚Äç‚ôÇÔ∏è –¢—ã –Ω–µ –∞–¥–º–∏–Ω, –∏ —Ç–µ–±—è –∑–¥–µ—Å—å –Ω–µ—Ç."
        else:
            position = next((i + 1 for i, row in enumerate(all_rows) if int(row["accepted_by"]) == current_user_id), None)
            count = next((row["count"] for row in all_rows if int(row["accepted_by"]) == current_user_id), 0)

            if position:
                leaderboard += f"\n<b>–¢–≤–æ–µ –º–µ—Å—Ç–æ: {position} - {count}üìç</b>"
            else:
                leaderboard += f"\n<b>–¢–≤–æ–µ –º–µ—Å—Ç–æ: {len(all_rows) + 1} - 0üìç</b>"

        await conn.close()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π

        await update.message.reply_text(leaderboard, parse_mode=ParseMode.HTML)
        return

    elif message == "—Ä–±–∞–ª–∞–Ω—Å":
        conn = await connect_db()
        row = await conn.fetchrow("SELECT tickets, neko_coins, drops FROM user_tickets WHERE user_id = $1", user_id)
        await conn.close()

        if not row:
            await update.message.reply_text(
                "‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ –≤ –ª—Å /start."
            )
        else:
            await update.message.reply_text(
                f"–ë–∏–ª–µ—Ç—ã: {row['tickets']}üé´\nNeko –∫–æ–∏–Ω—ã: {row['neko_coins']}üç•\n–ö–∞–ø–ª–∏: {row['drops']}üíß"
            )
        return

    elif message == "—Ç–æ–ø –±–∏–ª–µ—Ç—ã":
        conn = await connect_db()

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø-10
        top_users = await conn.fetch(""" 
            SELECT user_id, tickets, premium_until
            FROM user_tickets
            ORDER BY tickets DESC
            LIMIT 10
        """)

        # –û—Ç—Ä–∏–º—É—î–º–æ –º—ñ—Å—Ü–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_rank_row = await conn.fetchrow(""" 
            SELECT row_number FROM (
                SELECT user_id, tickets, ROW_NUMBER() OVER (ORDER BY tickets DESC) AS row_number
                FROM user_tickets
            ) sub
            WHERE user_id = $1
        """, user_id)

        user_tickets_row = await conn.fetchrow(""" 
            SELECT tickets FROM user_tickets WHERE user_id = $1
        """, user_id)

        await conn.close()

        text = "üé´ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª-–≤—É –±–∏–ª–µ—Ç–æ–≤:\n"

        for i in range(10):
            if i < len(top_users):
                uid = top_users[i]["user_id"]
                tickets = top_users[i]["tickets"]
                premium_until = top_users[i]["premium_until"]

                # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–æ–∫ üíé —è–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –ø—Ä–µ–º—ñ—É–º
                premium_icon = "üíé" if premium_until and premium_until > datetime.now() else ""

                try:
                    user = await bot.get_chat_member(update.effective_chat.id, uid)
                    name = user.user.full_name
                except:
                    name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}"
                text += f"{i+1} - {premium_icon}{name} ‚Äî {tickets} üéü\n"
            else:
                text += f"{i+1} -\n"

        if user_rank_row and user_tickets_row:
            text += f"\n–¢–≤–æ–µ –º–µ—Å—Ç–æ: {user_rank_row['row_number']} - {user_tickets_row['tickets']} üéü"

        await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        return

    elif message.lower().startswith("—Ä–ø—Ä–æ–º–æ"):
        parts = message.split()
        if len(parts) != 2:
            conn = await connect_db()
            rows = await conn.fetch("""
                SELECT code, max_uses, array_length(used_by, 1) AS used, created_by_bot
                FROM promo_codes
                WHERE (array_length(used_by, 1) IS NULL OR array_length(used_by, 1) < max_uses)
            """)
            await conn.close()

            if rows:
                active_promos = "\n".join([
                    f"{'üîÖ' if row['created_by_bot'] else 'üîÜ'}<code>{row['code']}</code>" for row in rows
                ])
            else:
                active_promos = "üî∏–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."

            await update.message.reply_text(
                f"ü§™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ä–ø—Ä–æ–º–æ {{–ø—Ä–æ–º–æ–∫–æ–¥}}\n"
                f"ü•†—Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n{active_promos}",
                parse_mode="HTML"
            )
            return

        promo_code = parts[1].lower()
        user_id = update.message.from_user.id

        conn = await connect_db()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
        banned = await conn.fetchval("SELECT banned FROM banned_users WHERE user_id = $1", user_id)
        if banned:
            await update.message.reply_text("üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
            await conn.close()
            return

        user = await conn.fetchrow("SELECT * FROM user_tickets WHERE user_id = $1", user_id)

        if not user:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
            await conn.close()
            return

        promo = await conn.fetchrow("SELECT * FROM promo_codes WHERE code = $1", promo_code)

        if not promo:
            await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await conn.close()
            return

        if user_id in promo["used_by"]:
            await update.message.reply_text("‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
            await conn.close()
            return

        if promo["max_uses"] != 0 and len(promo["used_by"]) >= promo["max_uses"]:
            await update.message.reply_text("üö´ –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –≤–≤–µ–ª–∏ –º–∞–∫—Å –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await conn.close()
            return

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–Ω–æ–∂–Ω–∏–∫–∏
        in_clan = bool(user["clans"])
        premium_until = user.get("premium_until")
        now = datetime.now()
        is_premium = premium_until and premium_until > now

        if in_clan and is_premium:
            mult_tickets = 4
            mult_neko = 3.5
            mult_drops = 4
        elif not in_clan and is_premium:
            mult_tickets = 2
            mult_neko = 1.5
            mult_drops = 2
        elif in_clan and not is_premium:
            mult_tickets = 2
            mult_neko = 2
            mult_drops = 2
        else:
            mult_tickets = 1
            mult_neko = 1
            mult_drops = 1

        tickets_reward = promo.get("reward_tickets", 0) * mult_tickets
        neko_reward = promo.get("reward_neko_coins", 0) * mult_neko
        drops_reward = promo.get("reward_drops", 0) * mult_drops

        await conn.execute("""
            UPDATE user_tickets
            SET tickets = tickets + $1,
                neko_coins = neko_coins + $2,
                drops = drops + $3
            WHERE user_id = $4
        """, int(tickets_reward), int(neko_reward), int(drops_reward), user_id)

        await conn.execute("""
            UPDATE promo_codes
            SET used_by = array_append(used_by, $1)
            WHERE code = $2
        """, user_id, promo_code)

        await conn.close()

        rewards = []
        if tickets_reward:
            rewards.append(f"{int(tickets_reward)} üéüÔ∏è")
        if neko_reward:
            rewards.append(f"{int(neko_reward)} üç•")
        if drops_reward:
            rewards.append(f"{int(drops_reward)} üíß")

        reward_msg = " –∏ ".join(rewards)
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward_msg}")
        return

    elif message.lower().startswith("–æ–±–º–µ–Ω "):
        parts = message.split()
        if len(parts) != 3 or not parts[2].isdigit():
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–±–º–µ–Ω –Ω 2500, –æ–±–º–µ–Ω –∫ 1, –æ–±–º–µ–Ω –± 100")
            return

        typ = parts[1].lower()
        amount = int(parts[2])

        conn = await connect_db()
        user = await conn.fetchrow("SELECT * FROM user_tickets WHERE user_id = $1", user_id)

        if not user:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
            await conn.close()
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–º—ñ—É–º
        is_premium = user.get("premium_until") and user["premium_until"] > datetime.utcnow()

        # –ö—É—Ä—Å–∏
        ticket_to_coin = 200 if is_premium else 100
        drop_to_coin = 1000 if is_premium else 750
        coin_to_drop_cost = 2000 if is_premium else 2500

        if typ == "–∫":
            if user["drops"] < amount:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–µ–ª—å üíß.")
                await conn.close()
                return
            neko_add = amount * drop_to_coin
            await conn.execute("""
                UPDATE user_tickets
                SET drops = drops - $1,
                    neko_coins = neko_coins + $2
                WHERE user_id = $3
            """, amount, neko_add, user_id)
            await conn.close()
            await update.message.reply_text(f"‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ! –í—ã –æ–±–º–µ–Ω—è–ª–∏ {amount} üíß –Ω–∞ {neko_add} üç•")
            return

        elif typ == "–±":
            if user["tickets"] < amount:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤ üéüÔ∏è.")
                await conn.close()
                return
            neko_add = amount * ticket_to_coin
            await conn.execute("""
                UPDATE user_tickets
                SET tickets = tickets - $1,
                    neko_coins = neko_coins + $2
                WHERE user_id = $3
            """, amount, neko_add, user_id)
            await conn.close()
            await update.message.reply_text(f"‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ! –í—ã –æ–±–º–µ–Ω—è–ª–∏ {amount} üéüÔ∏è –Ω–∞ {neko_add} üç•")
            return

        elif typ == "–Ω":
            if user["neko_coins"] < amount:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Neko –∫–æ–∏–Ω–æ–≤ üç•.")
                await conn.close()
                return
            drops_add = amount // coin_to_drop_cost
            if drops_add == 0:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Neko –∫–æ–∏–Ω–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ –∫–∞–ø–ª–∏.")
                await conn.close()
                return
            await conn.execute("""
                UPDATE user_tickets
                SET neko_coins = neko_coins - $1,
                    drops = drops + $2
                WHERE user_id = $3
            """, amount, drops_add, user_id)
            await conn.close()
            await update.message.reply_text(f"‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ! –í—ã –æ–±–º–µ–Ω—è–ª–∏ {amount} üç• –Ω–∞ {drops_add} üíß")
            return

        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–º–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫ (–∫–∞–ø–ª–∏), –± (–±–∏–ª–µ—Ç—ã) –∏–ª–∏ –Ω (–Ω–µ–∫–æ –∫–æ–∏–Ω—ã).")
            await conn.close()
            return

    elif message == "—Ç–æ–ø –∫–∞–ø–ª–∏":
        conn = await connect_db()

        top_users = await conn.fetch(""" 
            SELECT user_id, drops, premium_until
            FROM user_tickets
            ORDER BY drops DESC
            LIMIT 10
        """)

        user_rank_row = await conn.fetchrow(""" 
            SELECT row_number FROM (
                SELECT user_id, drops, ROW_NUMBER() OVER (ORDER BY drops DESC) AS row_number
                FROM user_tickets
            ) sub
            WHERE user_id = $1
        """, user_id)

        user_row = await conn.fetchrow(""" 
            SELECT drops FROM user_tickets WHERE user_id = $1
        """, user_id)

        await conn.close()

        text = "üíß –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞–ø–ª—è–º:\n"

        for i in range(10):
            if i < len(top_users):
                uid = top_users[i]["user_id"]
                drops = top_users[i]["drops"]
                premium_until = top_users[i]["premium_until"]

                # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–æ–∫ üíé —è–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –ø—Ä–µ–º—ñ—É–º
                premium_icon = "üíé" if premium_until and premium_until > datetime.now() else ""

                try:
                    user = await bot.get_chat_member(update.effective_chat.id, uid)
                    name = user.user.full_name
                except:
                    name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}"
                text += f"{i+1} - {premium_icon}{name} ‚Äî {drops} üíß\n"
            else:
                text += f"{i+1} -\n"

        if user_rank_row and user_row:
            text += f"\n–¢–≤–æ–µ –º–µ—Å—Ç–æ: {user_rank_row['row_number']} - {user_row['drops']} üíß"

        await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        return

    elif message == "—Ç–æ–ø –Ω–µ–∫–æ":
        conn = await connect_db()

        top_users = await conn.fetch(""" 
            SELECT user_id, neko_coins, premium_until
            FROM user_tickets
            ORDER BY neko_coins DESC
            LIMIT 10
        """)

        user_rank_row = await conn.fetchrow(""" 
            SELECT row_number FROM (
                SELECT user_id, neko_coins, ROW_NUMBER() OVER (ORDER BY neko_coins DESC) AS row_number
                FROM user_tickets
            ) sub
            WHERE user_id = $1
        """, user_id)

        user_row = await conn.fetchrow(""" 
            SELECT neko_coins FROM user_tickets WHERE user_id = $1
        """, user_id)

        await conn.close()

        text = "üç• –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ Neko –∫–æ–∏–Ω–∞–º:\n"

        for i in range(10):
            if i < len(top_users):
                uid = top_users[i]["user_id"]
                neko = top_users[i]["neko_coins"]
                premium_until = top_users[i]["premium_until"]

                # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–æ–∫ üíé —è–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –ø—Ä–µ–º—ñ—É–º
                premium_icon = "üíé" if premium_until and premium_until > datetime.now() else ""

                try:
                    user = await bot.get_chat_member(update.effective_chat.id, uid)
                    name = user.user.full_name
                except:
                    name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}"
                text += f"{i+1} - {premium_icon}{name} ‚Äî {neko} üç•\n"
            else:
                text += f"{i+1} -\n"

        if user_rank_row and user_row:
            text += f"\n–¢–≤–æ–µ –º–µ—Å—Ç–æ: {user_rank_row['row_number']} - {user_row['neko_coins']} üç•"

        await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        return

    elif message.lower() == "–ø—Ä–µ–º–∏—É–º –∫—É–ø–∏—Ç—å":
        conn = await connect_db()
        row = await conn.fetchrow("SELECT drops, premium_until FROM user_tickets WHERE user_id = $1", user_id)

        if not row:
            await update.message.reply_text("‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ –≤ –ª—Å /start.")
            await conn.close()
            return

        now = datetime.utcnow()
        if row["premium_until"] and row["premium_until"] > now:
            await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ü—Ä–µ–º–∏—É–º.")
            await conn.close()
            return

        if row["drops"] < 15:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üíß –ö–∞–ø–µ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ü—Ä–µ–º–∏—É–º–∞ (–Ω—É–∂–Ω–æ 15).")
            await conn.close()
            return

        new_until = now + timedelta(days=60)

        await conn.execute("""
            UPDATE user_tickets
            SET drops = drops - 15,
                premium_until = $1
            WHERE user_id = $2
        """, new_until, user_id)

        await conn.close()

        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ü—Ä–µ–º–∏—É–º –Ω–∞ 2 –º–µ—Å—è—Ü–∞ –∑–∞ 15 üíß –ö–∞–ø–µ–ª—å!")
        return

    elif message.lower() == "–º–æ–π –ø—Ä–µ–º–∏—É–º":
        conn = await connect_db()
        user = await conn.fetchrow("SELECT premium_until FROM user_tickets WHERE user_id = $1", user_id)
        await conn.close()

        if not user or not user["premium_until"]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞.")
            return

        now = datetime.utcnow()
        premium_until = user["premium_until"]

        if premium_until < now:
            await update.message.reply_text("‚ùå –í–∞—à –ø—Ä–µ–º–∏—É–º –∏—Å—Ç—ë–∫.")
            return

        formatted_date = premium_until.strftime("%d.%m.%Y %H:%M")
        await update.message.reply_text(f"üíé –ü—Ä–µ–º–∏—É–º: –∞–∫—Ç–∏–≤–µ–Ω\nüìÖ –î–æ: {formatted_date}")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞
    elif message.startswith("—Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω "):
        clan_name = message[13:].strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞

        if not clan_name:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞.")
            return

        conn = await connect_db()

        lower_clan_name = clan_name.lower()

        existing_clan = await conn.fetchval("""
            SELECT COUNT(*) FROM user_tickets WHERE LOWER(clans) = $1
        """, lower_clan_name)

        if existing_clan and existing_clan > 0:
            await conn.close()
            await update.message.reply_text("–ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_row = await conn.fetchrow("""
            SELECT tickets, drops, neko_coins, premium_until, clans
            FROM user_tickets WHERE user_id = $1
        """, user_id)

        await conn.close()

        if user_row:
            if user_row["clans"]:
                await update.message.reply_text("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.")
                return

            tickets = user_row["tickets"]
            drops = user_row["drops"]
            neko_coins = user_row["neko_coins"]
            premium_until = user_row["premium_until"]
            current_time = datetime.now()

            if premium_until and premium_until > current_time and tickets >= 100 and drops >= 75 and neko_coins >= 100000:
                text = (
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{clan_name}'? –î–ª—è —ç—Ç–æ–≥–æ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã:\n"
                    "100 –∫–≤–∏—Ç–∫–æ–≤, 75 –∫–∞–ø–µ–ª—å, 100000 –Ω–µ–∫–æ –∫–æ–∏–Ω–æ–≤.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ '–Ω–µ—Ç' —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
                )
                context.user_data['clan_create'] = {'name': clan_name}
                await update.message.reply_text(text)
            else:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞.")
        else:
            await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    elif message == "–¥–∞":
        clan_info = context.user_data.get('clan_create')
        if not clan_info:
            return

        clan_name = clan_info['name']

        conn = await connect_db()
        user_row = await conn.fetchrow("""
            SELECT tickets, drops, neko_coins, premium_until, clans
            FROM user_tickets WHERE user_id = $1
        """, user_id)

        if user_row:
            if user_row["clans"]:
                await conn.close()
                await update.message.reply_text("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.")
                return

            tickets = user_row["tickets"]
            drops = user_row["drops"]
            neko_coins = user_row["neko_coins"]
            premium_until = user_row["premium_until"]
            current_time = datetime.now()

            if premium_until and premium_until > current_time and tickets >= 100 and drops >= 75 and neko_coins >= 100000:
                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                await conn.execute("""
                    UPDATE user_tickets
                    SET clans = $1, tickets = tickets - 100, drops = drops - 75, neko_coins = neko_coins - 100000, rank = 'creator'
                    WHERE user_id = $2
                """, clan_name, user_id)

                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∫–ª–∞–Ω —É —Ç–∞–±–ª–∏—Ü—é clans
                await conn.execute("""
                    INSERT INTO clans (name, members, leader)
                    VALUES ($1, ARRAY[$2]::BIGINT[], $2)
                """, clan_name, user_id)

                await conn.close()

                del context.user_data['clan_create']
                await update.message.reply_text(f"–ö–ª–∞–Ω '{clan_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –í—ã —Å—Ç–∞–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –∫–ª–∞–Ω–∞.")
            else:
                await conn.close()
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞.")
        else:
            await conn.close()
            await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    elif message == "–Ω–µ—Ç":
        if context.user_data.get('clan_create'):
            del context.user_data['clan_create']
            await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–º–æ–π –∫–ª–∞–Ω"
    elif message == "–º–æ–π –∫–ª–∞–Ω":
        conn = await connect_db()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_row = await conn.fetchrow(""" 
            SELECT clans, rank FROM user_tickets WHERE user_id = $1
        """, user_id)

        await conn.close()

        if user_row:
            clan_name = user_row["clans"]
            user_rank = user_row["rank"]

            if clan_name and clan_name != "NULL":
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ
                conn = await connect_db()

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
                clan_members = await conn.fetch(""" 
                    SELECT user_id, rank FROM user_tickets WHERE clans = $1
                """, clan_name)

                await conn.close()

                if clan_members:
                    text = f"–í–∞—à –∫–ª–∞–Ω: {clan_name}\n\n"

                    # –í—ã–≤–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ —Å –∏—Ö —Ä–∞–Ω–≥–∞–º–∏
                    for member in clan_members:
                        member_user_id = member["user_id"]
                        rank = member["rank"]
                        try:
                            user = await bot.get_chat_member(update.effective_chat.id, member_user_id)
                            name = user.user.full_name
                        except:
                            name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member_user_id}"

                        if rank == "creator":
                            text += f"{name} - —Å–æ–∑–¥–∞—Ç–µ–ª—å\n"
                        else:
                            text += f"{name} - —É—á–∞—Å—Ç–Ω–∏–∫\n"

                    await update.message.reply_text(text)
                else:
                    await update.message.reply_text(f"–í –≤–∞—à–µ–º –∫–ª–∞–Ω–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—Ä–æ–º–µ –≤–∞—Å.")
            else:
                await update.message.reply_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.")
        else:
            await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    elif message.startswith("–∫–ª–∞–Ω –≤—Å—Ç—É–ø–∏—Ç—å "):
        clan_name = message[14:].strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞

        if not clan_name:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞.")
            return

        conn = await connect_db()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_row = await conn.fetchrow("""
            SELECT clans, rank FROM user_tickets WHERE user_id = $1
        """, user_id)

        if user_row:
            user_clan = user_row["clans"]

            if user_clan and user_clan != "NULL":
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–ª–∞–Ω–µ
                await conn.close()
                await update.message.reply_text("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–º –∫–ª–∞–Ω–µ.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            clan_row = await conn.fetchrow("""
                SELECT members FROM clans WHERE name = $1
            """, clan_name)

            if clan_row:
                members = clan_row["members"]
                if user_id in members:
                    await conn.close()
                    await update.message.reply_text("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º –∫–ª–∞–Ω–µ.")
                    return

                # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await conn.execute("""
                    UPDATE clans SET members = array_append(members, $1) WHERE name = $2
                """, user_id, clan_name)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await conn.execute("""
                    UPDATE user_tickets SET clans = $1, rank = 'member' WHERE user_id = $2
                """, clan_name, user_id)

                await conn.close()
                await update.message.reply_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω '{clan_name}'!")
            else:
                await conn.close()
                await update.message.reply_text(f"–ö–ª–∞–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{clan_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            await conn.close()
            await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    elif message.lower() == "–∫–ª–∞–Ω—ã":
        conn = await connect_db()
        clans = await conn.fetch("""
            SELECT name, array_length(members, 1) AS count
            FROM clans
            ORDER BY count DESC NULLS LAST
        """)
        await conn.close()

        if not clans:
            await update.message.reply_text("‚ùå –ö–ª–∞–Ω—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
            return

        clan_list = "\n".join([
            f"üè∞ <b>{clan['name']}</b> ‚Äî {clan['count'] or 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            for clan in clans
        ])

        await update.message.reply_text(
            f"üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤:\n\n{clan_list}",
            parse_mode="HTML"
        )

    elif message == "–∫–ª–∞–Ω –±—Ä–∞—Ç—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å":
        conn = await connect_db()

        user_data = await conn.fetchrow("SELECT clans, rank FROM user_tickets WHERE user_id = $1", user_id)
        if not user_data or not user_data["clans"]:
            await conn.close()
            await update.message.reply_text("‚ùó –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.")
            return

        if user_data["rank"] != "creator":
            await conn.close()
            await update.message.reply_text("‚ùó –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
            return

        await conn.execute("UPDATE clans SET allow_take = TRUE WHERE name = $1", user_data["clans"])
        await conn.close()
        await update.message.reply_text("‚úÖ –¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞ –º–æ–≥—É—Ç –±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.")

    elif message == "–∫–ª–∞–Ω –±—Ä–∞—Ç—å –∑–∞–ø—Ä–µ—Ç–∏—Ç—å":
        conn = await connect_db()

        user_data = await conn.fetchrow("SELECT clans, rank FROM user_tickets WHERE user_id = $1", user_id)
        if not user_data or not user_data["clans"]:
            await conn.close()
            await update.message.reply_text("‚ùó –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.")
            return

        if user_data["rank"] != "creator":
            await conn.close()
            await update.message.reply_text("‚ùó –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
            return

        await conn.execute("UPDATE clans SET allow_take = FALSE WHERE name = $1", user_data["clans"])
        await conn.close()
        await update.message.reply_text("üö´ –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –º–æ–∂–µ—Ç –±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.")

    elif message.startswith("–∫–ª–∞–Ω –≤–∑—è—Ç—å ") or message.startswith("–∫–ª–∞–Ω –ø–æ–ª–æ–∂–∏—Ç—å ") or message.startswith("–∫–ª–∞–Ω –±—Ä–∞—Ç—å "):
        parts = message.split()

        if message.startswith("–∫–ª–∞–Ω –±—Ä–∞—Ç—å "):
            if len(parts) < 4:
                await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: –∫–ª–∞–Ω –±—Ä–∞—Ç—å [—Ä–µ—Å—É—Ä—Å] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
                return

            resource_input = parts[2].lower()
            quantity_input = parts[3].strip()

            resource_map = {
                "–±–∏–ª–µ—Ç": "tickets",
                "–±–∏–ª–µ—Ç—ã": "tickets",
                "–Ω–µ–∫–∞": "neko_coins",
                "–Ω–µ–∫–æ": "neko_coins",
                "–∫–æ–π–Ω—ã": "neko_coins",
                "–∫–∞–ø–ª—è": "drops",
                "–∫–∞–ø–ª–∏": "drops",
                "–∫–∞–ø": "drops"
            }

            if not quantity_input.isdigit():
                await update.message.reply_text("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
                return

            if resource_input not in resource_map:
                await update.message.reply_text("‚ùó –†–µ—Å—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑: –±–∏–ª–µ—Ç, –Ω–µ–∫–∞, –∫–∞–ø–ª–∏.")
                return

            resource = resource_map[resource_input]
            quantity = int(quantity_input)

            conn = await connect_db()
            user_data = await conn.fetchrow("SELECT clans, rank FROM user_tickets WHERE user_id = $1", user_id)

            if not user_data or not user_data["clans"]:
                await conn.close()
                await update.message.reply_text("‚ùó –í—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –≤ –∫–ª–∞–Ω.")
                return

            if user_data["rank"] != "creator":
                await conn.close()
                await update.message.reply_text("‚ùó –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã.")
                return

            clan_name = user_data["clans"]

            clan_data = await conn.fetchrow("SELECT limits FROM clans WHERE name = $1", clan_name)
            limits = {}

            if clan_data and clan_data["limits"]:
                try:
                    limits = json.loads(clan_data["limits"])
                except Exception:
                    limits = {}

            limits[resource] = quantity

            await conn.execute("UPDATE clans SET limits = $1 WHERE name = $2", json.dumps(limits), clan_name)
            await conn.close()
            await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç –Ω–∞ {resource_input} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {quantity}")
            return

        if len(parts) < 4:
            await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: –∫–ª–∞–Ω [–≤–∑—è—Ç—å/–ø–æ–ª–æ–∂–∏—Ç—å] [—Ä–µ—Å—É—Ä—Å] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
            return

        action = parts[1].lower()
        resource_input = parts[2].lower()
        quantity_input = parts[3].strip()

        resource_map = {
            "–±–∏–ª–µ—Ç": "tickets",
            "–±–∏–ª–µ—Ç—ã": "tickets",
            "–Ω–µ–∫–∞": "neko_coins",
            "–Ω–µ–∫–æ": "neko_coins",
            "–∫–æ–π–Ω—ã": "neko_coins",
            "–∫–∞–ø–ª—è": "drops",
            "–∫–∞–ø–ª–∏": "drops",
            "–∫–∞–ø": "drops"
        }

        if not quantity_input.isdigit():
            await update.message.reply_text("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
            return

        if resource_input not in resource_map:
            await update.message.reply_text("‚ùó –†–µ—Å—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑: –±–∏–ª–µ—Ç, –Ω–µ–∫–∞, –∫–∞–ø–ª–∏.")
            return

        quantity = int(quantity_input)
        resource = resource_map[resource_input]

        conn = await connect_db()
        user_data = await conn.fetchrow("SELECT clans, rank, neko_coins, tickets, drops FROM user_tickets WHERE user_id = $1", user_id)

        if not user_data or not user_data["clans"]:
            await conn.close()
            await update.message.reply_text("‚ùó –í—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –≤ –∫–ª–∞–Ω.")
            return

        clan_name = user_data["clans"]
        user_rank = user_data["rank"]

        clan_data = await conn.fetchrow("SELECT storage, limits, allow_take FROM clans WHERE name = $1", clan_name)

        if not clan_data:
            await conn.close()
            await update.message.reply_text("‚ùó –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            storage = json.loads(clan_data["storage"])
        except Exception:
            storage = {"tickets": 0, "neko_coins": 0, "drops": 0}

        try:
            limits = json.loads(clan_data["limits"]) if clan_data["limits"] else {}
        except Exception:
            limits = {}

        allow_take = clan_data["allow_take"]

        if action == "–≤–∑—è—Ç—å":
            if user_rank != "creator" and not allow_take:
                await conn.close()
                await update.message.reply_text("‚ùó –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–±–∏—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
            if user_rank != "creator" and resource in limits:
                daily_taken = await conn.fetchval("""
                    SELECT SUM(amount) FROM clan_take_log
                    WHERE user_id = $1 AND clan = $2 AND resource = $3 AND DATE(date) = CURRENT_DATE
                """, user_id, clan_name, resource)

                daily_taken = daily_taken or 0
                if daily_taken + quantity > limits[resource]:
                    await conn.close()
                    await update.message.reply_text(f"‚ùó –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ {resource_input}. –û—Å—Ç–∞–ª–æ—Å—å: {limits[resource] - daily_taken}")
                    return

            if storage.get(resource, 0) >= quantity:
                storage[resource] -= quantity
            else:
                await conn.close()
                await update.message.reply_text(f"‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {resource_input} –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∞–Ω–∞.")
                return

            await conn.execute("UPDATE clans SET storage = $1 WHERE name = $2", json.dumps(storage), clan_name)

            await conn.execute(f"""
                UPDATE user_tickets SET {resource} = {resource} + $1 WHERE user_id = $2
            """, quantity, user_id)

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É
            await conn.execute("""
                INSERT INTO clan_take_log (user_id, clan, resource, amount, date)
                VALUES ($1, $2, $3, $4, NOW())
            """, user_id, clan_name, resource, quantity)

            await conn.close()
            await update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ {quantity} {resource_input} –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–ª–∞–Ω–∞.")

        elif action == "–ø–æ–ª–æ–∂–∏—Ç—å":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Å—É—Ä—Å–∞
            if user_data[resource] < quantity:
                await conn.close()
                await update.message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤.")
                return

            storage[resource] = storage.get(resource, 0) + quantity

            await conn.execute(f"""
                UPDATE user_tickets SET {resource} = {resource} - $1 WHERE user_id = $2
            """, quantity, user_id)

            await conn.execute("UPDATE clans SET storage = $1 WHERE name = $2", json.dumps(storage), clan_name)
            await conn.close()
            await update.message.reply_text(f"‚úÖ –í—ã –ø–æ–ª–æ–∂–∏–ª–∏ {quantity} {resource_input} –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∞–Ω–∞.")

    elif message == "–∫–ª–∞–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–µ":
        conn = await connect_db()

        user_data = await conn.fetchrow("SELECT clans FROM user_tickets WHERE user_id = $1", user_id)
        if not user_data or not user_data["clans"]:
            await conn.close()
            await update.message.reply_text("‚ùó –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.")
            return

        clan_name = user_data["clans"]

        clan_data = await conn.fetchrow("SELECT storage FROM clans WHERE name = $1", clan_name)
        await conn.close()

        if not clan_data:
            await update.message.reply_text("‚ùó –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
        try:
            storage = json.loads(clan_data["storage"])
        except Exception:
            storage = {"tickets": 0, "neko_coins": 0, "drops": 0}

        tickets = storage.get("tickets", 0)
        neko_coins = storage.get("neko_coins", 0)
        drops = storage.get("drops", 0)

        text = (
            f"üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∞–Ω–∞ <b>{clan_name}</b>:\n\n"
            f"üé´ –ë–∏–ª–µ—Ç—ã: <b>{tickets}</b>\n"
            f"üêæ –ù–µ–∫–æ –∫–æ–∏–Ω—ã: <b>{neko_coins}</b>\n"
            f"üíß –ö–∞–ø–ª–∏: <b>{drops}</b>"
        )

        await update.message.reply_text(text, parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.message.from_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send [chat_id] [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]")
        return

    chat_id = context.args[0]
    text = ' '.join(context.args[1:])

    try:
        sent_message = await bot.send_message(chat_id=chat_id, text=text)
        message_link = f"https://t.me/c/{str(chat_id).replace('-100', '')}/{sent_message.message_id}"
        log_text = (f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
                    f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {update.message.from_user.full_name} ({update.message.from_user.id})\n"
                    f"üìç –í —á–∞—Ç: {chat_id}\n"
                    f"üí¨ –¢–µ–∫—Å—Ç: {text}\n"
                    f"üîó <a href='{message_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</a>")
        await log_action(log_text)
        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    conn = await connect_db()
    await conn.execute("""
        INSERT INTO user_tickets (user_id, username)
        VALUES ($1, $2)
        ON CONFLICT (user_id) DO NOTHING
    """, user.id, user.username)
    await conn.close()

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ù–µ–∫–æ –±–æ—Ç! –ë–æ—Ç –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤(–Ω–∞–≤–µ—Ä–Ω–æ–µ).")

def escape_markdown(text):
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

async def get_reward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    username = f"@{user.username}" if user.username else f"ID: {user_id}"

    conn = await connect_db()
    row = await conn.fetchrow("SELECT tickets FROM user_tickets WHERE user_id = $1", user_id)

    if not row or row['tickets'] < 15:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤ (–Ω–∞–¥–æ 15).")
        await conn.close()
        return

    await conn.execute("UPDATE user_tickets SET tickets = tickets - 15 WHERE user_id = $1", user_id)
    await conn.close()

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    chat_id = update.message.chat.id
    message_id = update.message.message_id
    chat_link = f"https://t.me/c/{str(chat_id)[4:]}/{message_id}"

    # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —é–∑–µ—Ä–Ω–µ–π–º—É –¥–ª—è Markdown
    escaped_username = escape_markdown(username)

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    admin_text = f"üì• –ó–∞–ø–∏—Ç: {escaped_username}\nüîó [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]({chat_link})"

    await context.bot.send_message(
        chat_id=USER_CHAT_ID,
        text=admin_text,
        parse_mode="MarkdownV2"
    )

async def rban_user(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != 5283100992:  # –í–∞—à Telegram ID
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not update.message.reply_to_message:
        await update.message.reply_text("üíÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –±–∞–Ω–∏–º–æ
    banned_user_id = update.message.reply_to_message.from_user.id

    # –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    conn = await connect_db()
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ –∑–∞–±–∞–Ω–µ–Ω–∏—Ö
    await conn.execute("INSERT INTO banned_users (user_id, banned) VALUES ($1, $2) ON CONFLICT (user_id) DO UPDATE SET banned = $2", banned_user_id, True)
    
    # –û—á–∏—â–∞—î–º–æ –∫–≤–∏—Ç–∫–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await conn.execute("UPDATE user_tickets SET tickets = 0 WHERE user_id = $1", banned_user_id)
    
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    await conn.close()

    await update.message.reply_text(f"üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {banned_user_id} –∑–∞–±–∞–Ω–µ–Ω –∏ –≤—Å–µ –µ–≥–æ –±–∏–ª–µ—Ç—ã —É–±—Ä–∞–Ω—ã.")

async def runban_user(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != 5283100992:  # –í–∞—à Telegram ID
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not update.message.reply_to_message:
        await update.message.reply_text("üíÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ä–æ–∑–±–∞–Ω—é—î–º–æ
    unbanned_user_id = update.message.reply_to_message.from_user.id

    # –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    conn = await connect_db()

    # –ó–Ω—ñ–º–∞—î–º–æ –±–∞–Ω –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await conn.execute("UPDATE banned_users SET banned = FALSE WHERE user_id = $1", unbanned_user_id)
    
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    await conn.close()

    await update.message.reply_text(f"‚ú≥Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unbanned_user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥—É
def generate_promo_code():
    return ''.join(random.choices(string.ascii_lowercase, k=8))

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞–ø–µ–ª—å (—Ç—ñ–ª—å–∫–∏ –ø–æ –Ω–µ–¥—ñ–ª—è—Ö)
def get_drops():
    if datetime.now().weekday() == 6:  # –Ø–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–¥—ñ–ª—è
        return random.randint(1, 2)
    return 0

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–∞–≥–æ—Ä–æ–¥
def generate_rewards():
    neko_coins = random.randint(10, 150)  # –í–∏–ø–∞–¥–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å Neko –∫–æ—ó–Ω—ñ–≤
    drops = get_drops()  # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–ø–ª—ñ, —è–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–¥—ñ–ª—è
    tickets = 0  # –ö–≤–∏—Ç–∫–∏ –∑–∞–≤–∂–¥–∏ 0
    return neko_coins, drops, tickets

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
async def insert_promo_code(promo_code, max_users, neko_coins, drops, tickets):
    conn = await connect_db()

    await conn.execute("""
        INSERT INTO promo_codes (code, reward_tickets, reward_neko_coins, reward_drops, max_uses, created_by_bot)
        VALUES ($1, $2, $3, $4, $5, TRUE)
    """, promo_code, tickets, neko_coins, drops, max_users)

    await conn.close()

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É
async def create_promo_code():
    promo_code = generate_promo_code()  # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–º–æ–∫–æ–¥—É
    neko_coins, drops, tickets = generate_rewards()  # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–∞–≥–æ—Ä–æ–¥

    max_users = random.choice([30, 40, 50])  # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –∑ 30, 40 –∞–±–æ 50

    await insert_promo_code(promo_code, max_users, neko_coins, drops, tickets)

    chat_id = -1002268486160  # –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ chat_id

    message = f"üòù–ù–æ–≤—ã–π –ø—Ä–æ–º–æ!\nüéÅ<code>—Ä–ø—Ä–æ–º–æ {promo_code}</code>\nüòÆ–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {max_users}"

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    sent_message = await bot.send_message(chat_id, message, parse_mode='HTML')

    # –ü—Ä–∏–∫—Ä—ñ–ø–ª—é—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await sent_message.pin()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∑–∞–¥–∞—á—ñ –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è
def start_daily_promo_code_task():
    scheduler = AsyncIOScheduler()
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞–¥–∞—á—É –æ 9:00 –ø–æ –ú–°–ö –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è
    scheduler.add_job(create_promo_code, 'cron', hour=9, minute=30, timezone='Europe/Moscow')
    scheduler.start()

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ /ban —Ç–∞ /unban, —Ç–∞–∫ —Å–∞–º–æ —è–∫ —ñ –¥–ª—è /send
app.add_handler(CommandHandler("rban", rban_user))
app.add_handler(CommandHandler("runban", runban_user))

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /send
app.add_handler(CommandHandler("send", send_message))

app.add_handler(CommandHandler("delete_report", delete_report))

app.add_handler(CommandHandler('accept', accept_report))

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /id
app.add_handler(CommandHandler("id", get_chat_id))

app.add_handler(CommandHandler("show_reports", show_reports))
app.add_handler(CallbackQueryHandler(button, pattern="^page_\d+$"))

app.add_handler(CommandHandler("bot_stop", bot_stop))

app.add_handler(CommandHandler("get_reward", get_reward))

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("report", report_command))
app.add_handler(CallbackQueryHandler(handle_report, pattern="^(confirm|cancel)_\d+_\d+$"))
app.add_handler(MessageHandler(filters.Chat(GROUP_ID) & filters.TEXT, handle_message))
app.add_handler(CallbackQueryHandler(handle_copy_id, pattern="^copy_"))

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
    start_daily_promo_code_task()

    # –ó–∞–ø—É—Å–∫ polling —ñ —Ñ–æ–Ω–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
    await asyncio.gather(app.run_polling())  # –¶–µ –º–∞—î –±—É—Ç–∏ —Ç–≤—ñ–π Telegram –±–æ—Ç

if __name__ == "__main__":
    asyncio.run(main())
