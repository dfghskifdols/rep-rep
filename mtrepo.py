import nest_asyncio
import asyncio
import logging
import random
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from urllib.parse import urlparse
from telegram import CopyTextButton
import sqlite3
import pytz
import time
import aiopg
import asyncpg
import math
from pytz import timezone

moscow_tz = timezone('Europe/Moscow')
current_time = datetime.now(moscow_tz)
hour = current_time.hour

bot_paused_until = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –Ω–∞–ø–∏—Å–∞–ª–∏ "–†–µ–ø–æ—Ä—Ç-–±–æ—Ç-–≤–æ–ø—Ä–æ—Å"
waiting_for_question = set()

nest_asyncio.apply()

REPORTS_PER_PAGE = 3
API_TOKEN = '7705193251:AAFrnXeNBgiFo3ZQsGNvEOa2lNzQPKo3XHM'
ADMIN_CHAT_ID = -1002651165474
USER_CHAT_ID = 5283100992
ALLOWED_USER_IDS = [5283100992, 5344318601, 5713511759]
LOG_CHAT_ID = -1002411396364
ALLOWED_USERS = [5283100992, 5713511759, 5344318601, 6340673182]
ADMINS_ALLOWED = [5283100992, 5713511759, 5344318601, 6340673182, 1385118926, 5222780613, 6139706645]
GROUP_ID = -1002268486160
LOG_CHATDEL_ID = -4665694960

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(API_TOKEN)
app = Application.builder().token(API_TOKEN).build()

# –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ "–†–∞–§–∞"
rafa_responses = [
    "<b>Blue_Nexus –∏–Ω–æ–≥–¥–∞ —Å—Ç–∞–µ—Ç –µ–±–ª–∞–Ω–æ–º</b>", 
    "<b>Blue_Nexus –¥–µ—Ä–∂–∞—Ç –≤ —Ä–∞–±—Å—Ç–≤–µ</b>",  
    "<b>Blue_Nexus –∞–±–∞–∂–∞–µ—Ç —á–∞—Ç –≥–ø—Ç</b>",
    "<b>–ö–∏—Ä–∏—á –ª—é–±–∏—Ç –∞–Ω–∏–º–µ-—Ç—è–Ω–æ–∫... –Ω–æ –≤ –∂–∏–∑–Ω–∏ –¥–µ–≤—É—à–µ–∫ –æ–Ω –Ω–µ –ª—é–±–∏—Ç</b>", 
    "<b>–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ö–∏—Ä–∏—á —Å–æ–∑–¥–∞–≤–∞–ª –∫–∞–Ω–∞–ª –ø—Ä–æ —Å–≤–æ—é –∂–∏–∑–Ω—å</b>", 
    "<b>–ö–∏—Ä–∏—á –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π</b>",
    "<b>Freezee - —É—Å–ø–µ—Ö —É—Å–ø–µ—à–Ω—ã–π</b>", 
    "<b>Freezee - –∞–Ω—Ç–∏–ø–∞—Ü–∏—Ñ–∏—Å—Ç‚òÆ</b>", 
    "<b>Freezee –ø–æ—Ö—É–∏—Å—Ç –ø–æ –∂–∏–∑–Ω–∏</b>",
    "<b>Vipsii - –¥–æ–ª–±–∞–µ–±</b>", 
    "<b>Vipsii —Å–ª–∏—à–∫–æ–º –≥–ª—É–ø—ã–π</b>", 
    "<b>–¢—Ä–µ—Ç–∏–π —Ñ–∞–∫—Ç –ø—Ä–æ —Å–µ–±—è Vipsii –∑–∞–±—ã–ª</b>", 
    "<b>Exponnentik - –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å —á–∞—è</b>", 
    "<b>Exponnentik –¥–µ—Ä–∂–∏—Ç —á–µ—Ä–∏ –≤ –∑–∞–ª–æ–∂–Ω–∏–∫–∞—Ö</b>", 
    "<b>Exponnentik –≥–ª–∞–≤–Ω—ã–π –ø—É–ø—Å –∫–∏—Ä–∏—á–∞(–∫–∏—Ä–∏—á —ç—Ç–æ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç)</b>",
    "<b>–†–∞–§–∞ - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –†–∞–Ω–¥–æ–º –§–∞–∫—Ç –ø—Ä–æ –ê–Ω–¥–º–∏–Ω–æ–≤</b>"
]
  
# –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è "–†–∞–§—É"
rafu_responses = [
    "<b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç! SsVladiSlaveSs –Ω–µ –∑–Ω–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–∫—Ç</b>", 
    "<b>–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ @khvtg –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã–π –∏–≥—Ä–æ–∫, —Ö–æ—Ä–æ—à–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —â–µ–¥—Ä—ã–π —Å–æ–≥–∏–ª—å–¥–∏–µ—Ü –∏ –∫—Ä—É—Ç–æ–π –¥–∏–∑–∞–π–Ω–µ—Ä ‚Äì –æ–Ω –µ—â–µ –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Å–∫—Ä–æ–º–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å</b>", 
    "<b>#–•–∞—é—à#–ë–æ–π.#—Ç–≤–∏–∫–∞—Ç#Not –•–æ—á–µ—Ç —É–º–µ—Ä–µ—Ç—å –æ—Ç —Å–≤–æ–µ–π –¥—É—à–∏</b>",
    "<b>–ë–æ–º–±–∞–±–æ—Ç –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ –±–æ—Çüôà</b>",
    "<b>–û –ø—É—à–æ—á–∫–µ: 11 –ª–µ—Ç, –≥–µ–π, –∏—â–µ—Ç –∂–µ–Ω—É</b>",
    "<b>–ù–∏–Ω–¥–∑—è - –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ—Ä</b>",
    "<b>–¢–∏—Ö–∏–π_–°–æ–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –º–∏—Ä–∞–∂ –æ—Å—Ç—Ä–æ–≤ –∏ –Ω–∞ –Ω–µ–º —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É –¥–ª—è –≤4 —Ä–∞—Å –≤ –±–ª–æ–∫—Å —Ñ—Ä—É–∫—Ç</b>",
    "<b>Vloger –ø—Ä–æ —Å–µ–±—è: —è —Å—Ç—É–¥–µ–Ω—Ç –∏ –æ—á–µ–Ω—å —Ç–∞—â—É—Å –ø–æ –∞–Ω–∏–º–µ —Ç—è–Ω–∫–∞–º –Ω–æ –≤ —Ä–∏–ª–µ –¥–µ–≤—É—à–µ–∫ –±–æ—é—Å—å</b>",
    "<b>StrazhTellOffichal –û—á–µ–Ω—å –ª—é–±–∏—Ç –Æ–Ω–∏, —á—Ç–æ –æ–Ω –¥–∞–∂–µ —Å–æ–∑–¥–∞–ª —Å–≤–æ–π –∫—É–ª—å—Ç –ø–æ —Å–≤–æ–µ–π –ª—é–±–∏–º–æ–π –∫–æ—à–∫–µ Uni Cat</b>",
    "<b>Mapc - –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π Python-–∞–π—Ç–∏—à–Ω–∏–∫ —Å –±–æ–ª—å—à–∏–º —Å—Ç–∞–∂–æ–º –≤–∞–ª—è–Ω–∏—è –Ω–∞ –∫—Ä–æ–≤–∞—Ç–∏... –Ω–∞–∫–æ—Ä–º–∏—Ç–µ –µ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞</b>",
    "<b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –≤—Å—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è ‚Äî —ç—Ç–æ –ø–æ–¥–≤–∞–ª, –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî danyagreench.</b>",
    "<b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç, SsVladiSlaveSs —ç—Ç–æ SsVladiSlaveSs</b>",
    "<b>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ª—é–±–∏—Ç –∫–æ—Ç–∏–∫–æ–≤</b>",
    "<b>–ü—Ä–æ—Å—Ç–æ —á–µ–ª - –≥–µ–π</b>",
    "<b>–ö–æ—Ç –∞–Ω–∞–Ω–∞—Å —Å—Ç–∞–ª –∞–Ω–∞–Ω–∞—Å–æ–º –∫–æ–≥–¥–∞ –Ω–∞ –µ–≥–æ –≥–æ–ª–æ–≤—É —Å–≤–∞–ª–∏–ª—Å—è –∞–Ω–∞–Ω–∞—Å</b>",
    "<b>üêç…•…•∆é –æ—á–µ–Ω—å –±–æ–∏—Ç—Å—è —Å–æ–±–∞–∫</b>",
    "<b>–£ –õ—é—Ü–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è —ç–∫–∑–∞–º–µ–Ω</b>",
    "<b>–†–∞–§—É - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –†–ê–Ω–¥–æ–º –§–∞–∫—Ç –ø—Ä–æ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>"
]

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∏—á–∏–Ω—ã —Ä–µ–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü1.3", "–ø1.3")
REPORT_REASON_REGEX = re.compile(r"^–ø\d+\.\d+$", re.IGNORECASE)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—É –∑–∞ –∫–ª—é—á–µ–º
async def get_report_by_key(report_key):
    conn = await connect_db()
    report = await conn.fetchrow('''
        SELECT * FROM user_reports WHERE report_key = $1
    ''', report_key)
    await conn.close()
    return report

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–µ–ø–æ—Ä—Ç—É
async def update_report_status(report_key, status, accepted_by=None):
    conn = await connect_db()
    await conn.execute('''
        UPDATE user_reports
        SET status = $1, accepted_by = $2
        WHERE report_key = $3
    ''', status, accepted_by, report_key)
    await conn.close()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ –≥—Ä—É–ø–ø—É
async def log_action(text: str):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ª–æ–≥-–≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª
        await bot.send_message(LOG_CHAT_ID, text, parse_mode=ParseMode.HTML)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")

async def accept_report(update, context):
    user_id = update.message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMINS_ALLOWED:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–∞–¥–∞–Ω–æ –∫–ª—é—á —Ä–µ–ø–æ—Ä—Ç—É
    if len(context.args) == 0:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∏–º–µ—Ä: /accept {–∫–ª—é—á —Ä–µ–ø–æ—Ä—Ç—É}")
        return

    report_key = context.args[0]  # –ö–ª—é—á —Ä–µ–ø–æ—Ä—Ç—É –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–∏

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–ø–æ—Ä—Ç –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞ –∫–ª—é—á–µ–º
    report = await get_report_by_key(report_key)
    if not report:
        await update.message.reply_text(f"‚ùå –†–µ–ø–æ—Ä—Ç —Å –∫–ª—é—á–æ–º {report_key} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ä–µ–ø–æ—Ä—Ç –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏–π
    if report['status'] == 'accepted':
        await update.message.reply_text(f"‚ùå –†–µ–ø–æ—Ä—Ç —Å –∫–ª—é—á–æ–º {report_key} —É–∂–µ –ø—Ä–∏–Ω—è—Ç!")
        return

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–µ–ø–æ—Ä—Ç—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    try:
        await update_report_status(report_key, 'accepted', str(user_id))
        await update.message.reply_text(f"‚úÖ –†–µ–ø–æ—Ä—Ç —Å –∫–ª—é—á–æ–º {report_key} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±–∫–µ: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—É –∑–∞ –∫–ª—é—á–µ–º
async def delete_report(update: Update, context: CallbackContext):
    if update.message.from_user.id not in ALLOWED_USER_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ!.")
        return

    if not context.args:
        await update.message.reply_text("„ÄΩÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á —Ä–µ–ø–æ—Ä—Ç–∞. –ü—Ä–∏–º–µ—Ä: /delete_report 12345_67890")
        return

    report_key = context.args[0]
    conn = await connect_db()
    result = await conn.execute("DELETE FROM user_reports WHERE report_key = $1", report_key)
    await conn.close()

    if result == "DELETE 1":
        await update.message.reply_text(f"‚ùáÔ∏è –†–µ–ø–æ—Ä—Ç —Å –∫–ª—é—á–æ–º <code>{report_key}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç —Å –∫–ª—é—á–æ–º <code>{report_key}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
async def bot_stop(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    if user_id in ALLOWED_USER_IDS:
        try:
            minutes = int(context.args[0])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            stop_time = time.time() + minutes * 60  # –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            await update.message.reply_text(f"üí§ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
            
            # –ñ–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
            await asyncio.sleep(minutes * 60)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            await update.message.reply_text("üõú –ë–æ—Ç —Å–Ω–æ–≤–∞ –∑–∞–ø—É—â–µ–Ω.")
        except (IndexError, ValueError):
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö). –ü—Ä–∏–º–µ—Ä: /bot_stop 5")
    else:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL
async def connect_db():
    return await asyncpg.connect(
        dsn='postgresql://neondb_owner:npg_PXgGyF7Z5MUJ@ep-shy-feather-a2zlgfcw-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require'
    )

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
async def get_reports(page=1, reports_per_page=3):
    conn = await connect_db()
    offset = (page - 1) * reports_per_page
    rows = await conn.fetch(''' 
        SELECT * FROM user_reports
        ORDER BY report_date DESC
        LIMIT $1 OFFSET $2
    ''', reports_per_page, offset)
    await conn.close()
    return rows

# –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–ø–æ—Ä—Ç—ñ–≤
async def get_total_reports():
    conn = await connect_db()
    total_reports = await conn.fetchval('SELECT COUNT(*) FROM user_reports')
    await conn.close()
    return total_reports

# –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–ø–æ—Ä—Ç–∏
async def show_reports(update, context, page=1):
    user_id = (
        update.effective_user.id if update.effective_user else None
    )

    if user_id not in ALLOWED_USERS:
        if update.message:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ.")
        else:
            await update.callback_query.answer("‚õî –¢–µ–±–µ –Ω–µ–ª—å–∑—è", show_alert=True)
        return

    reports = await get_reports(page)
    total_reports = await get_total_reports()
    total_pages = math.ceil(total_reports / 3)

    if not reports:
        if update.message:
            await update.message.reply_text("üåê –ù–µ—Ç—É —Ä–µ–ø–æ—Ä—Ç–æ–≤.")
        else:
            await update.callback_query.message.reply_text("üåê –ù–µ—Ç—É —Ä–µ–ø–æ—Ä—Ç–æ–≤")
        return

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑—É
    message_text = "–°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤:\n\n"
    for report in reports:
        status = report.get('status', 'not accepted')
        accepted_by = report.get('accepted_by')

        message_text += f"üîë–ö–ª—é—á —Ä–µ–ø–æ—Ä—Ç–∞: <code>{report['report_key']}</code>\n"
        message_text += f"üÜîID —é–∑–µ—Ä–∞: {report['user_id']}\n"
        message_text += f"üì©ID —Å–æ–æ–±—â–µ–Ω–∏—è: {report['message_id']}\n"
        message_text += f"üî®–ö—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª: {report['reporter_name']}\n"
        message_text += f"ü§ï–ù–∞ –∫–æ–≥–æ: {report['reported_name']}\n"
        message_text += f"üîó–°—Å—ã–ª–∫–∞: {report['message_link']}\n"
        message_text += f"‚åöÔ∏è–í—Ä–µ–º—è: {report['report_time']}\n"
        message_text += f"üí≠–¢–µ–∫—Å—Ç: {report['reported_text']}\n"

        if status == "accepted":
            message_text += f"‚úÖ –°—Ç–∞—Ç—É—Å: –ø—Ä–∏–Ω—è—Ç (–∞–¥–º–∏–Ω: {accepted_by})\n\n"
        else:
            message_text += f"üïê –°—Ç–∞—Ç—É—Å: –Ω–µ –ø—Ä–∏–Ω—è—Ç\n\n"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard = []
    buttons = []
    if page > 1:
        buttons.append(InlineKeyboardButton("‚Üê", callback_data=f"page_{page - 1}"))

    buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))

    if page < total_pages:
        buttons.append(InlineKeyboardButton("‚Üí", callback_data=f"page_{page + 1}"))

    keyboard.append(buttons)
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    if update.message:
        print(f"Replying with message: {message_text}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True,
            parse_mode=ParseMode.HTML  # –¥–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ HTML
        )
    else:
        print(f"Editing message: {message_text}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        await update.callback_query.message.edit_text(
            message_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True,
            parse_mode=ParseMode.HTML  # –¥–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ HTML
        )

async def button(update, context):
    query = update.callback_query
    data = query.data

    if data.startswith("page_"):
        page = int(data.split("_")[1])
        await show_reports(update, context, page=page)
        await query.answer()

    print("test")

# –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
async def save_report(user_id, message_id, reason, reporter_name, reported_name, message_link, reported_text, report_date):
    conn = await connect_db()
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ú–°–ö
    report_time = datetime.now(moscow_tz).replace(tzinfo=None)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è report_key –Ω–∞ –æ—Å–Ω–æ–≤—ñ user_id —Ç–∞ message_id
    report_key = f"{user_id}_{message_id}"

# –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π —Ä–µ–ø–æ—Ä—Ç –∑ —É—Å—ñ–º–∞ –¥–∞–Ω–∏–º–∏ –≤ —Ç–∞–±–ª–∏—Ü—é, –¥–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
    await conn.execute(''' 
        INSERT INTO user_reports (report_key, user_id, message_id, reporter_name, reported_name, message_link, report_time, reported_text, report_date, status)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, 'pending')  -- —Å—Ç–∞—Ç—É—Å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    ''', report_key, user_id, message_id, reporter_name, reported_name, message_link, report_time, reported_text, report_date)

    await conn.close()

confirmed_reports = set()

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–ø–æ—Ä—Ç—É
async def report_command(update: Update, context: CallbackContext):
    if not update.message.reply_to_message:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–†–µ–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ <i>–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>!</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ä–µ–ø–æ—Ä—Ç–∞: <code>/report –ü1.3</code>",
            parse_mode=ParseMode.HTML
        )
        return

    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ —Ä–µ–ø–æ—Ä—Ç–∞!</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ä–µ–ø–æ—Ä—Ç–∞: <code>/report –ü1.3</code>",
            parse_mode=ParseMode.HTML
        )
        return

    reason = context.args[0].lower()  # <- –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    message = update.message  # –æ—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ update
    message_id = update.message.reply_to_message.message_id
    user_id = update.message.from_user.id
    report_key = f"{user_id}_{message_id}"
    reporter_name = update.message.from_user.full_name
    reported_name = update.message.reply_to_message.from_user.full_name
    message_link = f"https://t.me/{update.message.chat.username}/{message_id}"
    report_time = update.message.date
    reported_text = update.message.reply_to_message.text

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î forward_date —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, —è–∫—â–æ –Ω–µ–º–∞—î - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ date
    report_date = message.forward_date if hasattr(message, 'forward_date') else message.date
    report_date = report_date.replace(tzinfo=None)

    if report_key in confirmed_reports:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
        return

    keyboard = [[
             InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{user_id}_{message_id}"),
             InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_{user_id}_{message_id}")
         ]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üîä–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π <b>{reason}</b>?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
    await log_action(f"üìå –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª {update.message.from_user.full_name} ({user_id}) —Å –ø—Ä–∏—á–∏–Ω–æ–π {reason}")
    if reason != "–ø1.0":
         await save_report(user_id, message_id, reason, reporter_name, reported_name, message_link, reported_text, report_date)

# –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—É
async def handle_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    data = query.data.split("_")
    if len(data) < 3:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return

    action = data[0]
    try:
        user_id = int(data[1])
        message_id = int(data[2])
    except ValueError:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞!")
        return

    if query.from_user.id != user_id:
        await query.answer(text="‚ùå –ù–µ–ª—å–∑—è –∂–º—è–∫–∞—Ç—å —á—É–∂–∏–µ —Ä–µ–ø–æ—Ä—Ç—ã!", show_alert=True)
        return

    report_key = f"{user_id}_{message_id}"
    if report_key in confirmed_reports:
        await query.answer(text="‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)
        return

    if action == "confirm":
        reported_message = query.message.reply_to_message
        reported_user = reported_message.from_user

        if query.message.chat.username:
            message_link = f"https://t.me/{query.message.chat.username}/{reported_message.message_id}"
            link_text = f"<a href='{message_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>"
        else:
            link_text = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

        message_text = reported_message.text if reported_message.text else "(–º–µ–¥–∏–∞-—Ñ–∞–π–ª)"
        reported_user_mention = f"<b>{reported_user.full_name}</b> (@{reported_user.username})"

        report_text = (
            f"<blockquote>‚ö†Ô∏è <b>–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç!</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {reported_user_mention}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<blockquote>{message_text}</blockquote>\n</blockquote>"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {link_text}\n"
            f"üîë <b>–ö–ª—é—á —Ä–µ–ø–æ—Ä—Ç—É:</b> <code>{report_key}</code>" 
        )

        await query.message.edit_text("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...")

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await bot.get_chat_administrators(ADMIN_CHAT_ID)
        admin_mentions = [f"@{admin.user.username}" for admin in admins if admin.user.username]

        await bot.send_message(
            ADMIN_CHAT_ID, report_text,
            parse_mode=ParseMode.HTML,
            protect_content=True,
            disable_web_page_preview=True
        )

          # –î–æ–¥–∞—î–º–æ –∫–≤–∏—Ç–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ –ë–î
        conn = await connect_db()
        is_banned = await conn.fetchval("SELECT banned FROM banned_users WHERE user_id = $1", reported_user.id)

        if is_banned is None or not is_banned:
            await conn.execute("""
                INSERT INTO user_tickets (user_id, tickets)
                VALUES ($1, 1)
                ON CONFLICT (user_id)
                DO UPDATE SET tickets = user_tickets.tickets + 1
            """, reported_user.id)
        await conn.close()

    if admin_mentions:
        # –î—ñ–ª–∏–º–æ –Ω–∞ 3 —á–∞—Å—Ç–∏–Ω–∏
        third = len(admin_mentions) // 3
        part1 = admin_mentions[:third]
        part2 = admin_mentions[third:third*2]
        part3 = admin_mentions[third*2:]

        await asyncio.sleep(4)
        await bot.send_message(ADMIN_CHAT_ID, "üîî 1: " + " ".join(part1))
        await asyncio.sleep(4)
        await bot.send_message(ADMIN_CHAT_ID, "üîî 2: " + " ".join(part2))
        await asyncio.sleep(4)
        await bot.send_message(ADMIN_CHAT_ID, "üîî 3: " + " ".join(part3))

        confirmed_reports.add(report_key)
        await query.message.edit_text("‚úÖ–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        await log_action(f"‚úÖ –†–µ–ø–æ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.full_name} ({query.from_user.id})")
    elif action == "cancel":
        await query.message.edit_text("‚ùå –†–µ–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        await log_action(f"‚ùå –†–µ–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.full_name} ({query.from_user.id})")

# –§—É–Ω–∫—Ü–∏—è –æ–¥–µ—Ä–∂–∞–Ω–∏—è ID —á–∞—Ç—É
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    # –Æ–∑–∞–µ–º InlineKeyboardButton –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID
    button = InlineKeyboardButton(text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", copy_text=CopyTextButton(text=chat_id))
    keyboard = [[button]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}", parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

# –û–±—Ä–æ–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Copy ID
async def handle_copy_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.data.split('_')[1]
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å

# –ö–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ
    await query.edit_message_text(f"‚úÖ ID —á–∞—Ç–∞: {chat_id} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip().lower()  # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ –º–∞–ª–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä
    user_id = update.message.from_user.id

    # –û–±—Ä–æ–±–∫–∞ –æ–±–æ—Ö –∫–æ–º–∞–Ω–¥
    if message in ["—Ä–±–≤", "—Ä–µ–ø–æ—Ä—Ç –±–æ—Ç –≤–æ–ø—Ä–æ—Å"]:
        if user_id not in waiting_for_question:
            waiting_for_question.add(user_id)
            await update.message.reply_text("–°–ª—É—à–∞—é! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
            asyncio.create_task(wait_for_response(user_id, update.message.chat_id, context))
        else:
            await update.message.reply_text("‚è≥ –Ø —É–∂–µ –∂–¥—É –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ!")
        return

    elif user_id in waiting_for_question:
        waiting_for_question.remove(user_id)
        admin_id = 5283100992  # –¢–≤—ñ–π Telegram ID
        try:
            await context.bot.send_message(chat_id=admin_id, text=f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å @{update.message.from_user.username or update.message.from_user.first_name}:\n\n{message}")
            await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await update.message.reply_text("‚ùå –°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return

    elif message in ["–Ω–µ–∫–æ", "–≥–¥–µ –Ω–µ–∫–æ"]:
        admins = await context.bot.get_chat_administrators(ADMIN_CHAT_ID)
        if admins:
            random_admin = random.choice(admins)
            random_username = random_admin.user.username if random_admin.user.username else "unknown_user"
            sent_message = await update.message.reply_text("–≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∏ –ø–æ –∞–π–ø–∏üíª")
            await asyncio.sleep(2)
            await sent_message.edit_text(f"–ö–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∞! –û–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É @{random_username}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π!")

    elif message == "–ø–∏–Ω–≥":
        await update.message.reply_text("–ê –Ω–∞—Ö—É—è –æ–Ω —Ç–µ–±–µ?")

    elif message in ["—Ä–∞—Ñ–∞", "—Ä–∞–Ω–¥–æ–º —Ñ–∞–∫—Ç –∞–¥–º–∏–Ω"]:
        response = random.choice(rafa_responses)
        await update.message.reply_text(f"<b>{response}</b>", parse_mode=ParseMode.HTML)
    
    elif message in ["—Ä–∞—Ñ—É", "—Ä–∞–Ω–¥–æ–º —Ñ–∞–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏"]:
        response = random.choice(rafu_responses)  # –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –†–∞–§—É
        await update.message.reply_text(response, parse_mode=ParseMode.HTML)

    elif message.lower() == "—Ç–æ–ø –ø—Ä–ø":
        conn = await connect_db()
        rows = await conn.fetch("""
            SELECT accepted_by, COUNT(*) AS count
            FROM user_reports
            WHERE status = 'accepted'
            GROUP BY accepted_by
            ORDER BY count DESC
            LIMIT 10
        """)

        all_rows = await conn.fetch("""
            SELECT accepted_by, COUNT(*) AS count
            FROM user_reports
            WHERE status = 'accepted'
            GROUP BY accepted_by
            ORDER BY count DESC
        """)
        await conn.close()

        leaderboard = "<b>üèÜ –¢–æ–ø 10 –∞–¥–º–∏–Ω–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤:</b>\n"
        for idx in range(10):
            if idx < len(rows):
                user_id = int(rows[idx]["accepted_by"])
                count = rows[idx]["count"]

                try:
                    user = await bot.get_chat(user_id)
                    name = user.full_name
                    link = f"<a href='tg://user?id={user_id}'>{name}</a>"
                except:
                    link = f"<code>{user_id}</code>"

                leaderboard += f"{idx + 1} - {link} ‚Äî {count} üìç\n"
            else:
                leaderboard += f"{idx + 1} - \n"

        current_user_id = update.message.from_user.id  # –ó–∞–ª–∏—à–∞—î–º–æ —è–∫ int

        if current_user_id not in ADMINS_ALLOWED:
            leaderboard += "\nüôÖ‚Äç‚ôÇÔ∏è –¢—ã –Ω–µ –∞–¥–º–∏–Ω, –∏ —Ç–µ–±—è –∑–¥–µ—Å—å –Ω–µ—Ç."
        else:
            position = next((i + 1 for i, row in enumerate(all_rows) if row["accepted_by"] == current_user_id), None)
            count = next((row["count"] for row in all_rows if row["accepted_by"] == current_user_id), 0)

            if position:
                leaderboard += f"\n–¢–≤–æ–µ –º–µ—Å—Ç–æ - {position} - {count}"
            else:
                leaderboard += f"\n–¢–≤–æ–µ –º–µ—Å—Ç–æ - {len(all_rows) + 1} - 0"

        await update.message.reply_text(leaderboard, parse_mode=ParseMode.HTML)
        return

    elif message == "–º–æ–∏ –±–∏–ª–µ—Ç—ã":
        conn = await connect_db()
        row = await conn.fetchrow("SELECT tickets FROM user_tickets WHERE user_id = $1", user_id)
        await conn.close()

        if not row:
            await update.message.reply_text(
                "‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ –≤ –ª—Å /start."
            )
        else:
            await update.message.reply_text(
                f"üé´ –£ –≤–∞—Å {row['tickets']} –±–∏–ª–µ—Ç–æ–≤."
            )
        return

    elif message == "—Ç–æ–ø –±–∏–ª":
        conn = await connect_db()

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø-10
        top_users = await conn.fetch("""
            SELECT user_id, tickets
            FROM user_tickets
            ORDER BY tickets DESC
            LIMIT 10
        """)

        # –û—Ç—Ä–∏–º—É—î–º–æ –º—ñ—Å—Ü–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_rank_row = await conn.fetchrow("""
            SELECT row_number FROM (
                SELECT user_id, tickets, ROW_NUMBER() OVER (ORDER BY tickets DESC) AS row_number
                FROM user_tickets
            ) sub
            WHERE user_id = $1
        """, user_id)

        user_tickets_row = await conn.fetchrow("""
            SELECT tickets FROM user_tickets WHERE user_id = $1
        """, user_id)

        await conn.close()

        text = "üé´ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª-–≤—É –±–∏–ª–µ—Ç–æ–≤:\n"

        for i in range(10):
            if i < len(top_users):
                uid = top_users[i]["user_id"]
                tickets = top_users[i]["tickets"]
                try:
                    user = await bot.get_chat_member(update.effective_chat.id, uid)
                    name = user.user.full_name
                except:
                    name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}"
                text += f"{i+1} - {name} ‚Äî {tickets} üéü\n"
            else:
                text += f"{i+1} -\n"

        if user_rank_row and user_tickets_row:
            text += f"\n–¢–≤–æ–µ –º–µ—Å—Ç–æ: {user_rank_row['row_number']} - {user_tickets_row['tickets']} üéü"

        await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        return

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.message.from_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send [chat_id] [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]")
        return

    chat_id = context.args[0]
    text = ' '.join(context.args[1:])

    try:
        sent_message = await bot.send_message(chat_id=chat_id, text=text)
        message_link = f"https://t.me/c/{str(chat_id).replace('-100', '')}/{sent_message.message_id}"
        log_text = (f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
                    f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {update.message.from_user.full_name} ({update.message.from_user.id})\n"
                    f"üìç –í —á–∞—Ç: {chat_id}\n"
                    f"üí¨ –¢–µ–∫—Å—Ç: {text}\n"
                    f"üîó <a href='{message_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</a>")
        await log_action(log_text)
        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    conn = await connect_db()
    await conn.execute("""
        INSERT INTO user_tickets (user_id, username)
        VALUES ($1, $2)
        ON CONFLICT (user_id) DO NOTHING
    """, user.id, user.username)
    await conn.close()

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ /report –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.")

async def get_reward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    username = f"@{user.username}" if user.username else f"ID: {user_id}"

    conn = await connect_db()
    row = await conn.fetchrow("SELECT tickets FROM user_tickets WHERE user_id = $1", user_id)

    if not row or row['tickets'] < 10:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤ (–Ω–∞–¥–æ 10).")
        await conn.close()
        return

    await conn.execute("UPDATE user_tickets SET tickets = tickets - 10 WHERE user_id = $1", user_id)
    await conn.close()

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text("üìù –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    chat_id = update.message.chat.id
    message_id = update.message.message_id
    chat_link = f"https://t.me/c/{str(chat_id)[4:]}/{message_id}"

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    admin_text = f"üì• –ó–∞–ø–∏—Ç: {username}\nüîó [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]({chat_link})"

    await context.bot.send_message(
        chat_id=USER_CHAT_ID,
        text=admin_text,
        parse_mode="Markdown"
    )

async def rban_user(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != 5283100992:  # –í–∞—à Telegram ID
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not update.message.reply_to_message:
        await update.message.reply_text("üíÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –±–∞–Ω–∏–º–æ
    banned_user_id = update.message.reply_to_message.from_user.id

    # –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    conn = await connect_db()
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ –∑–∞–±–∞–Ω–µ–Ω–∏—Ö
    await conn.execute("INSERT INTO banned_users (user_id, banned) VALUES ($1, $2) ON CONFLICT (user_id) DO UPDATE SET banned = $2", banned_user_id, True)
    
    # –û—á–∏—â–∞—î–º–æ –∫–≤–∏—Ç–∫–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await conn.execute("UPDATE user_tickets SET tickets = 0 WHERE user_id = $1", banned_user_id)
    
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    await conn.close()

    await update.message.reply_text(f"üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {banned_user_id} –∑–∞–±–∞–Ω–µ–Ω –∏ –≤—Å–µ –µ–≥–æ –±–∏–ª–µ—Ç—ã —É–±—Ä–∞–Ω—ã.")

async def runban_user(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != 5283100992:  # –í–∞—à Telegram ID
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not update.message.reply_to_message:
        await update.message.reply_text("üíÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ä–æ–∑–±–∞–Ω—é—î–º–æ
    unbanned_user_id = update.message.reply_to_message.from_user.id

    # –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    conn = await connect_db()

    # –ó–Ω—ñ–º–∞—î–º–æ –±–∞–Ω –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await conn.execute("UPDATE banned_users SET banned = FALSE WHERE user_id = $1", unbanned_user_id)
    
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    await conn.close()

    await update.message.reply_text(f"‚ú≥Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unbanned_user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ /ban —Ç–∞ /unban, —Ç–∞–∫ —Å–∞–º–æ —è–∫ —ñ –¥–ª—è /send
app.add_handler(CommandHandler("rban", rban_user))
app.add_handler(CommandHandler("runban", runban_user))

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /send
app.add_handler(CommandHandler("send", send_message))

app.add_handler(CommandHandler("delete_report", delete_report))

app.add_handler(CommandHandler('accept', accept_report))

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /id
app.add_handler(CommandHandler("id", get_chat_id))

app.add_handler(CommandHandler("show_reports", show_reports))
app.add_handler(CallbackQueryHandler(button, pattern="^page_\d+$"))

app.add_handler(CommandHandler("bot_stop", bot_stop))

app.add_handler(CommandHandler("get_reward", get_reward))

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("report", report_command))
app.add_handler(CallbackQueryHandler(handle_report, pattern="^(confirm|cancel)_\d+_\d+$"))
app.add_handler(MessageHandler(filters.Chat(GROUP_ID) & filters.TEXT, handle_message))
app.add_handler(CallbackQueryHandler(handle_copy_id, pattern="^copy_"))

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")

    # –ó–∞–ø—É—Å–∫ polling —ñ —Ñ–æ–Ω–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
    await asyncio.gather(app.run_polling())

if __name__ == "__main__":
    asyncio.run(main())
