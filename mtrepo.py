import logging
import random
import re
from datetime import datetime, timezone, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import psycopg2
from psycopg2 import sql
from urllib.parse import urlparse
from telegram import CopyTextButton

nest_asyncio.apply()

API_TOKEN = '7705193251:AAFrnXeNBgiFo3ZQsGNvEOa2lNzQPKo3XHM'
ADMIN_CHAT_ID = -1002651165474
USER_CHAT_ID = 5283100992
LOG_CHAT_ID = -1002411396364
ALLOWED_USERS = [5283100992, 6340673182, 5344318601, 1552417677, 1385118926, 6139706645, 5222780613]

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(API_TOKEN)
app = Application.builder().token(API_TOKEN).build()

# –•—Ä–∞–Ω–∏–º —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç—ã
confirmed_reports = set()

# –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ "–†–∞–§–∞"
rafa_responses = [
    "<b>Blue_Nexus –∏–Ω–æ–≥–¥–∞ —Å—Ç–∞–µ—Ç –µ–±–ª–∞–Ω–æ–º</b>", 
    "<b>Blue_Nexus –¥–µ—Ä–∂–∞—Ç –≤ —Ä–∞–±—Å—Ç–≤–µ</b>",  
    "<b>Blue_Nexus –∞–±–∞–∂–∞–µ—Ç —á–∞—Ç –≥–ø—Ç</b>",
    "<b>–ö–∏—Ä–∏—á –ª—é–±–∏—Ç –∞–Ω–∏–º–µ-—Ç—è–Ω–æ–∫... –Ω–æ –≤ –∂–∏–∑–Ω–∏ –¥–µ–≤—É—à–µ–∫ –æ–Ω –Ω–µ –ª—é–±–∏—Ç</b>", 
    "<b>–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ö–∏—Ä–∏—á —Å–æ–∑–¥–∞–≤–∞–ª –∫–∞–Ω–∞–ª –ø—Ä–æ —Å–≤–æ—é –∂–∏–∑–Ω—å</b>", 
    "<b>–ö–∏—Ä–∏—á –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π</b>",
    "<b>IDC - –æ—á–µ–Ω—å –∑–∞–Ω—è—Ç—ã–π —á–µ–ª–æ–≤–µ–∫... –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ —á–µ–º, –∑–∞—á–µ–º –∏ –ø–æ—á–µ–º—É</b>", 
    "<b>IDC –ª—é–±–∏—Ç —Å–∫–∞–º–∏—Ç—å –¥–µ—Ç–µ–π –Ω–∞ –ø–µ—Ç–æ–≤ –≤ –∞–¥–æ–ø—Ç –º–∏</b>", 
    "<b>IDC... —è –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç</b>",
    "<b>Freezee - —É—Å–ø–µ—Ö —É—Å–ø–µ—à–Ω—ã–π</b>", 
    "<b>Freezee - –∞–Ω—Ç–∏–ø–∞—Ü–∏—Ñ–∏—Å—Ç‚òÆ</b>", 
    "<b>Freezee –ø–æ—Ö—É–∏—Å—Ç –ø–æ –∂–∏–∑–Ω–∏</b>",
    "<b>Vipsii - –¥–æ–ª–±–∞–µ–±</b>", 
    "<b>Vipsii —Å–ª–∏—à–∫–æ–º –≥–ª—É–ø—ã–π</b>", 
    "<b>–¢—Ä–µ—Ç–∏–π —Ñ–∞–∫—Ç –ø—Ä–æ —Å–µ–±—è Vipsii –∑–∞–±—ã–ª</b>", 
    "<b>Exponnentik - –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å —á–∞—è</b>", 
    "<b>Exponnentik –¥–µ—Ä–∂–∏—Ç —á–µ—Ä–∏ –≤ –∑–∞–ª–æ–∂–Ω–∏–∫–∞—Ö</b>", 
    "<b>Exponnentik –≥–ª–∞–≤–Ω—ã–π –ø—É–ø—Å –∫–∏—Ä–∏—á–∞(–∫–∏—Ä–∏—á —ç—Ç–æ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç)</b>",
    "<b>–†–∞–§–∞ - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –†–∞–Ω–¥–æ–º –§–∞–∫—Ç –ø—Ä–æ –ê–Ω–¥–º–∏–Ω–æ–≤</b>"
]
  
# –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è "–†–∞–§—É"
rafu_responses = [
    "<b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç! SsVladiSlaveSs –Ω–µ –∑–Ω–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–∫—Ç</b>", 
    "<b>–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ @khvtg –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã–π –∏–≥—Ä–æ–∫, —Ö–æ—Ä–æ—à–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —â–µ–¥—Ä—ã–π —Å–æ–≥–∏–ª—å–¥–∏–µ—Ü –∏ –∫—Ä—É—Ç–æ–π –¥–∏–∑–∞–π–Ω–µ—Ä ‚Äì –æ–Ω –µ—â–µ –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Å–∫—Ä–æ–º–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å</b>", 
    "<b>#–•–∞—é—à#–ë–æ–π.#—Ç–≤–∏–∫–∞—Ç#Not –•–æ—á–µ—Ç —É–º–µ—Ä–µ—Ç—å –æ—Ç —Å–≤–æ–µ–π –¥—É—à–∏</b>",
    "<b>–ë–æ–º–±–∞–±–æ—Ç –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ –±–æ—Çüôà</b>",
    "<b>–û –ø—É—à–æ—á–∫–µ: 11 –ª–µ—Ç, –≥–µ–π, –∏—â–µ—Ç –∂–µ–Ω—É</b>",
    "<b>–ù–∏–Ω–¥–∑—è - –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ—Ä</b>",
    "<b>–¢–∏—Ö–∏–π_–°–æ–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –º–∏—Ä–∞–∂ –æ—Å—Ç—Ä–æ–≤ –∏ –Ω–∞ –Ω–µ–º —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É –¥–ª—è –≤4 —Ä–∞—Å –≤ –±–ª–æ–∫—Å —Ñ—Ä—É–∫—Ç</b>",
    "<b>Vloger –ø—Ä–æ —Å–µ–±—è: —è —Å—Ç—É–¥–µ–Ω—Ç –∏ –æ—á–µ–Ω—å —Ç–∞—â—É—Å –ø–æ –∞–Ω–∏–º–µ —Ç—è–Ω–∫–∞–º –Ω–æ –≤ —Ä–∏–ª–µ –¥–µ–≤—É—à–µ–∫ –±–æ—é—Å—å</b>",
    "<b>StrazhTellOffichal –û—á–µ–Ω—å –ª—é–±–∏—Ç –Æ–Ω–∏, —á—Ç–æ –æ–Ω –¥–∞–∂–µ —Å–æ–∑–¥–∞–ª —Å–≤–æ–π –∫—É–ª—å—Ç –ø–æ —Å–≤–æ–µ–π –ª—é–±–∏–º–æ–π –∫–æ—à–∫–µ Uni Cat</b>",
    "<b>Mapc - –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π Python-–∞–π—Ç–∏—à–Ω–∏–∫ —Å –±–æ–ª—å—à–∏–º —Å—Ç–∞–∂–æ–º –≤–∞–ª—è–Ω–∏—è –Ω–∞ –∫—Ä–æ–≤–∞—Ç–∏... –Ω–∞–∫–æ—Ä–º–∏—Ç–µ –µ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞</b>",
    "<b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –≤—Å—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è ‚Äî —ç—Ç–æ –ø–æ–¥–≤–∞–ª, –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî danyagreench.</b>",
    "<b>–∂–¥—É</b>",
    "<b>–∂–¥—É</b>",
    "<b>–ü—Ä–æ—Å—Ç–æ —á–µ–ª - –≥–µ–π</b>",
    "<b>–†–∞–§—É - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –†–ê–Ω–¥–æ–º –§–∞–∫—Ç –ø—Ä–æ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>"
]

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∏—á–∏–Ω—ã —Ä–µ–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü1.3", "–ø1.3")
REPORT_REASON_REGEX = re.compile(r"^–ø\d+\.\d+$", re.IGNORECASE)

# –ü–∞—Ä—Å–∏–Ω–≥ URL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_URL = 'postgresql://neondb_owner:npg_PXgGyF7Z5MUJ@ep-shy-feather-a2zlgfcw-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require'
url = urlparse(DATABASE_URL)

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ URL
DB_NAME = url.path[1:]  # –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–π —Å–∏–º–≤–æ–ª '/' –∑ —à–ª—è—Ö—É
DB_USER = url.username
DB_PASSWORD = url.password
DB_HOST = url.hostname
DB_PORT = url.port if url.port else 5432  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä—Ç, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π –≤ URL

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def create_reports_table():
    conn = psycopg2.connect(
        dbname=DB_NAME, 
        user=DB_USER, 
        password=DB_PASSWORD, 
        host=DB_HOST,
        port=DB_PORT
    )
    cur = conn.cursor()
    cur.execute('DROP TABLE IF EXISTS reports')
    cur.execute('''
        CREATE TABLE reports (
            id SERIAL PRIMARY KEY,
            report_text TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    cur.close()
    conn.close()
    print("–¢–∞–±–ª–∏—Ü—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä–µ–ø–æ—Ä—Ç—ñ–≤
def get_reports():
    conn = psycopg2.connect(
        dbname=DB_NAME, 
        user=DB_USER, 
        password=DB_PASSWORD, 
        host=DB_HOST,
        port=DB_PORT
    )
    cur = conn.cursor()
    cur.execute('SELECT * FROM reports ORDER BY created_at DESC')
    reports = cur.fetchall()
    cur.close()
    conn.close()
    return reports

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ –≥—Ä—É–ø–ø—É
async def log_action(text: str):
    try:
        await bot.send_message(LOG_CHAT_ID, text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /report –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.")

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–ø–æ—Ä—Ç–∞
async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–†–µ–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ <i>–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>!</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ä–µ–ø–æ—Ä—Ç–∞: <code>/report –ü1.3</code>",
            parse_mode=ParseMode.HTML
        )
        return

    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ —Ä–µ–ø–æ—Ä—Ç–∞!</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ä–µ–ø–æ—Ä—Ç–∞: <code>/report –ü1.3</code>",
            parse_mode=ParseMode.HTML
        )
        return

    reason = context.args[0]
    if not REPORT_REASON_REGEX.match(reason):
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏—á–∏–Ω—ã!</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: <code>/report –ü1.3</code>",
            parse_mode=ParseMode.HTML
        )
        return

    message_id = update.message.reply_to_message.message_id
    user_id = update.message.from_user.id
    report_key = f"{user_id}_{message_id}"

    if report_key in confirmed_reports:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
        return

    keyboard = [[
        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{user_id}_{message_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_{user_id}_{message_id}")
    ]] 

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π <b>{reason}</b>?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    await log_action(f"üìå –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª {update.message.from_user.full_name} ({user_id}) —Å –ø—Ä–∏—á–∏–Ω–æ–π {reason}")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞
async def handle_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    data = query.data.split("_")
    if len(data) < 3:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return

    action = data[0]
    try:
        user_id = int(data[1])
        message_id = int(data[2])
    except ValueError:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞!")
        return

    if query.from_user.id != user_id:
        await query.answer(text="‚ùå –ù–µ–ª—å–∑—è –∂–º—è–∫–∞—Ç—å —á—É–∂–∏–µ —Ä–µ–ø–æ—Ä—Ç—ã!", show_alert=True)
        return

    report_key = f"{user_id}_{message_id}"
    if report_key in confirmed_reports:
        await query.answer(text="‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)
        return

    if action == "confirm":
        reported_message = query.message.reply_to_message
        reported_user = reported_message.from_user

        if query.message.chat.username:
            message_link = f"https://t.me/{query.message.chat.username}/{reported_message.message_id}"
            link_text = f"<a href='{message_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>"
        else:
            link_text = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

        message_text = reported_message.text if reported_message.text else "(–º–µ–¥–∏–∞-—Ñ–∞–π–ª)"
        reported_user_mention = f"<b>{reported_user.full_name}</b> (@{reported_user.username})"

        report_text = (
            f"<blockquote>‚ö†Ô∏è <b>–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç!</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {reported_user_mention}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<blockquote>{message_text}</blockquote>\n</blockquote>"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {link_text}"
        )

        await query.message.edit_text("‚è≥–û—Ç–ø—Ä–∞–≤–∫–∞...")

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await bot.get_chat_administrators(ADMIN_CHAT_ID)
        admin_mentions = [f"@{admin.user.username}" for admin in admins if admin.user.username]

        await bot.send_message(
            ADMIN_CHAT_ID, report_text,
            parse_mode=ParseMode.HTML,
            protect_content=True,
            disable_web_page_preview=True
        )

        if admin_mentions:
            half = len(admin_mentions) // 2
            await asyncio.sleep(4)
            await bot.send_message(ADMIN_CHAT_ID, "–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –∞–¥–º–∏–Ω–æ–≤: " + " ".join(admin_mentions[:half]))
            await asyncio.sleep(4)
            await bot.send_message(ADMIN_CHAT_ID, "–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –∞–¥–º–∏–Ω–æ–≤: " + " ".join(admin_mentions[half:]))

        confirmed_reports.add(report_key)
        await query.message.edit_text("‚úÖ–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        await log_action(f"‚úÖ –†–µ–ø–æ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.full_name} ({query.from_user.id})")
    elif action == "cancel":
        await query.message.edit_text("‚ùå –†–µ–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        await log_action(f"‚ùå –†–µ–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.full_name} ({query.from_user.id})")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏–Ω–≥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def handle_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    
    if len(data) < 3:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return

    action = data[0]  # –î–µ–π—Å—Ç–≤–∏–µ: ping

    if len(data) == 3:
        ping_answer = data[2]
        
        if ping_answer == "yes":
            await query.message.edit_text("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞...")

            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await bot.get_chat_administrators(ADMIN_CHAT_ID)
            admin_mentions = [f"@{admin.user.username}" for admin in admins if admin.user.username]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –∏ –ø–∏–Ω–≥
            await bot.send_message(ADMIN_CHAT_ID, "–†–µ–ø–æ—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", parse_mode=ParseMode.HTML)

            if admin_mentions:
                half = len(admin_mentions) // 2
                await asyncio.sleep(4)
                await bot.send_message(ADMIN_CHAT_ID, "–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –∞–¥–º–∏–Ω–æ–≤: " + " ".join(admin_mentions[:half]))
                await asyncio.sleep(4)
                await bot.send_message(ADMIN_CHAT_ID, "–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –∞–¥–º–∏–Ω–æ–≤: " + " ".join(admin_mentions[half:]))

            await query.message.edit_text("‚úÖ –†–µ–ø–æ—Ä—Ç –∏ –ø–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        elif ping_answer == "no":
            await query.message.edit_text("‚ùå –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –ø–∏–Ω–≥–∞.")
        else:
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–∏–Ω–≥–µ.")
    else:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∏–Ω–≥–∞.")

# –§—É–Ω–∫—Ü–∏—è –æ–¥–µ—Ä–∂–∞–Ω–∏—è ID —á–∞—Ç—É
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    # –Æ–∑–∞–µ–º InlineKeyboardButton –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID
    button = InlineKeyboardButton(text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", copy_text=CopyTextButton(text=chat_id))
    keyboard = [[button]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`", parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

# –û–±—Ä–æ–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Copy ID
async def handle_copy_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.data.split('_')[1]
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å

# –ö–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ
    await query.edit_message_text(f"‚úÖ ID —á–∞—Ç–∞: `{chat_id}` —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–æ–±–æ—Ç–∫–∏ 
async def handle_message(update: Update, context):
    message = update.message.text.lower()
    
# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()

    if message.lower() == "–ù–µ–∫–æ".lower():
        admins = await bot.get_chat_administrators(ADMIN_CHAT_ID)
        if admins:
            random_admin = random.choice(admins)
            random_username = random_admin.user.username if random_admin.user.username else "unknown_user"
            sent_message = await update.message.reply_text("–≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∏ –ø–æ –∞–π–ø–∏üíª")
            await asyncio.sleep(5)
            await sent_message.edit_text(f"–ö–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∞! –û–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É @{random_username}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π!")

    elif message.lower() == "–ü–∏–Ω–≥".lower():
        await update.message.reply_text("–ê –Ω–∞—Ö—É—è –æ–Ω —Ç–µ–±–µ?")

    elif message.lower() == "–†–∞–§–∞".lower():
        response = random.choice(rafa_responses)
        await update.message.reply_text(f"<b>{response}</b>", parse_mode=ParseMode.HTML)
    
    elif message.lower() == "–†–∞–§—É".lower():
        response = random.choice(rafu_responses)
        await update.message.reply_text(response, parse_mode=ParseMode.HTML)

    elif message.lower() == "–ø—Ä–∏–≤–µ—Ç".lower():  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ "–ø—Ä–∏–≤–µ—Ç" –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        current_time = datetime.now(timezone.utc) + timedelta(hours=3)
        hour = current_time.hour

        if 5 <= hour < 7:
            response = "–ê —Ç—ã —Å–ø–∞—Ç—å –Ω–µ —Ö–æ—á–µ—à—å?"
        elif 7 <= hour < 13:
            response = "–î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞!"
        elif 13 <= hour < 17:
            response = "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
        elif 17 <= hour < 22:
            response = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞!"
        else:
            response = "–ê –Ω—É –∫–∞ —Å–ø–∞—Ç—å!"

        await update.message.reply_text(response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.message.from_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send [chat_id] [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]")
        return

    chat_id = context.args[0]
    text = ' '.join(context.args[1:])

    try:
        sent_message = await bot.send_message(chat_id=chat_id, text=text)
        message_link = f"https://t.me/c/{str(chat_id).replace('-100', '')}/{sent_message.message_id}"
        log_text = (f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
                    f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {update.message.from_user.full_name} ({update.message.from_user.id})\n"
                    f"üìç –í —á–∞—Ç: {chat_id}\n"
                    f"üí¨ –¢–µ–∫—Å—Ç: {text}\n"
                    f"üîó <a href='{message_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</a>")
        await log_action(log_text)
        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /send
app.add_handler(CommandHandler("send", send_message))

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /id
app.add_handler(CommandHandler("id", get_chat_id))

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("report", report_command))
app.add_handler(CallbackQueryHandler(handle_report, pattern="^(confirm|cancel)_"))
app.add_handler(CallbackQueryHandler(handle_ping, pattern="^(ping)_"))
app.add_handler(MessageHandler(filters.TEXT, handle_message))
app.add_handler(CallbackQueryHandler(handle_copy_id, pattern="^copy_"))

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
