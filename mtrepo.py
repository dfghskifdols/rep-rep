import asyncio
import nest_asyncio
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import logging
import random

nest_asyncio.apply()

API_TOKEN = '7705193251:AAG0pWFSQfcu-S-huST-PU-OsxezNC2u67g'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_CHAT_ID = -1002651165474  # ID –≥—Ä—É–ø–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó
USER_CHAT_ID = 5283100992  # –í–∞—à ID –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –õ–°
LOG_CHAT_ID = -1002411396364  # ID –≥—Ä—É–ø–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥—ñ–π

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(API_TOKEN)
app = Application.builder().token(API_TOKEN).build()

# –•—Ä–∞–Ω–∏–º–æ –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ —Ä–µ–ø–æ—Ä—Ç–∏
confirmed_reports = set()

# –ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ "–†–∞–§–∞"
rafa_responses = [
    "Hymanoid –Ω–µ–Ω–∞–≤–∏–¥–∏—Ç—å –º–µ–Ω–µ, –∑–∞ —Ç–µ —â–æ —è –π–æ–≥–æ –Ω–µ –∑–∞–≤–∂–¥–∏ –ø—ñ–Ω–≥—É—é", "Blue_Nexus —ñ–Ω–æ–¥—ñ —Å—Ç–∞—î –µ–±–ª–∞–Ω–æ–º", "–ö–∏—Ä–∏—á –Ω–µ—É–≤–∞–∂–Ω–∏–π", 
    "IDC... —è –Ω–µ –ø—Ä–∏–¥—É–º–∞–≤ —â–æ –≤—ñ–Ω —Ä–æ–±–∏—Ç—å", "–†–∞–§–∞ - —Å–∫–æ—Ä–æ—á–µ–Ω–æ –†–∞–Ω–¥–æ–º –§–∞–∫—Ç", "Freeze –ø–æ—Ö—É—ó—Å—Ç –ø–æ –∂–∏—Ç—Ç—é", "Humanoid –ø–æ—Å—Ç—ñ–π–Ω–æ –Ω–∏—Ç—å, —â–æ —É –Ω—å–æ–≥–æ –Ω–µ–º–∞—î —Ç–≤–∏–Ω–∫–∞",
    "Blue_Nexus —Ç—Ä–∏–º–∞—é—Ç—å —É —Ä–∞–±—Å—Ç–≤—ñ", "–ö–∏—Ä–∏—á –ª—é–±–∏—Ç—å –∞–Ω—ñ–º–µ-—Ç—è–Ω–æ–∫... –∞–ª–µ –≤ –∂–∏—Ç—Ç—ñ –¥—ñ–≤—á–∞—Ç –≤—ñ–Ω –Ω–µ –ª—é–±–∏—Ç—å", "IDC - –¥—É–∂–µ –∑–∞–π–Ω—è—Ç–∞ –ª—é–¥–∏–Ω–∞... –Ω–µ –ø–∏—Ç–∞–π—Ç–µ —á–∏–º, –Ω–∞–≤—ñ—â–æ —ñ —á–æ–º—É",
    "Freeze - —É—Å–ø—ñ—Ö —É—Å–ø—ñ—à–Ω–∏–π", "Humanoid —Ñ–∞–Ω–∞—Ç –ø–Ω–≥ –±–ª—é –ª–æ–∫ —á–µ–∫–∞—î 3 —Å–µ–∑–æ–Ω –∑—Ä–æ–±–ª–µ–Ω–∏–π –≤ Microsoft Excel", "Blue_Nexus –æ–±–æ–∂–∞—î —á–∞—Ç GPT",
    "–Ü–∑–Ω–∞—á–∞–ª—å–Ω–æ –ö–∏—Ä–∏—á —Å—Ç–≤–æ—Ä—é–≤–∞–≤ –∫–∞–Ω–∞–ª –ø—Ä–æ —Å–≤–æ—î –∂–∏—Ç—Ç—è", "IDC –ª—é–±–∏—Ç—å —Å–∫–∞–º–∏—Ç–∏ –¥—ñ—Ç–µ–π –Ω–∞ –ø–µ—Ç–æ–≤ –≤ –∞–¥–æ–ø—Ç –º—ñ", "Freeze - –∞–Ω—Ç–∏–ø–∞—Ü–∏—Ñ—ñ—Å—Ç‚òÆÔ∏è"
]

# –ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è "–†–∞–§—É"
rafu_responses = [
    "–¶—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç! SsVladiSlaveSs –Ω–µ –∑–Ω–∞—î —Ü–µ–π —Ñ–∞–∫—Ç", 
    "—á–µ–∫–∞—é", 
    "—á–µ–∫–∞—é",  
    "–ú–æ–∂–µ —Ç–∏ —Ö–æ—Ç—ñ–≤ –Ω–∞–ø–∏—Å–∞—Ç–∏ –†–∞–§–∞?", 
    "–†–∞–§—É - —Å–∫–æ—Ä–æ—á–µ–Ω–æ –†–ê–Ω–¥–æ–º –§–∞–∫—Ç –ø—Ä–æ –£—á–∞—Å–Ω–∏–∫—ñ–≤"
]

async def log_action(text: str):
    try:
        await bot.send_message(LOG_CHAT_ID, text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ª–æ–≥–∞: {e}")

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–î–æ–±—Ä–µ —É—Ç—Ä–æ, –º—ñ–π –≥–æ—Å–ø–æ–¥–∏–Ω!"
async def send_welcome_message():
    await bot.send_message(chat_id=USER_CHAT_ID, text="–î–æ–±—Ä–µ —É—Ç—Ä–æ, –º—ñ–π –≥–æ—Å–ø–æ–¥–∏–Ω!")

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ /report –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–µ–ø–æ—Ä—Ç.")
    await log_action(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ñ–¥ {update.message.from_user.full_name} ({update.message.from_user.id})")

# –§—É–Ω–∫—Ü—ñ—è —Ä–µ–ø–æ—Ä—Ç—É
async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
        return
    
    message_id = update.message.reply_to_message.message_id
    user_id = update.message.from_user.id
    report_key = f"{user_id}_{message_id}"

    if report_key in confirmed_reports:
        await update.message.reply_text("‚ö†Ô∏è –¶–µ–π —Ä–µ–ø–æ—Ä—Ç –≤–∂–µ –±—É–≤ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π!")
        return

    keyboard = [[
        InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"confirm_{user_id}_{message_id}"),
        InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"cancel_{user_id}_{message_id}")
    ]]  

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–µ–ø–æ—Ä—Ç?", reply_markup=reply_markup)
    await log_action(f"üìå –†–µ–ø–æ—Ä—Ç –≤—ñ–¥ {update.message.from_user.full_name} ({user_id})")

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–ø–æ—Ä—Ç—É
async def handle_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    if len(data) < 3:
        await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö!")
        return

    action = data[0]
    try:
        user_id = int(data[1])
        message_id = int(data[2])
    except ValueError:
        await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–ø–æ—Ä—Ç—É!")
        return

    if query.from_user.id != user_id:
        await query.answer(text="‚ùå –ù–µ–ª—å–∑—è –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ —á—É–∂—ñ —Ä–µ–ø–æ—Ä—Ç–∏!", show_alert=True)
        return

    report_key = f"{user_id}_{message_id}"
    if report_key in confirmed_reports:
        await query.answer(text="‚ö†Ô∏è –¶–µ–π —Ä–µ–ø–æ—Ä—Ç –≤–∂–µ –±—É–≤ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π!", show_alert=True)
        return

    if action == "confirm":
        reported_message = query.message.reply_to_message
        reported_user = reported_message.from_user

        if query.message.chat.username:
            message_link = f"https://t.me/{query.message.chat.username}/{reported_message.message_id}"
            link_text = f"<a href='{message_link}'>–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</a>"
        else:
            link_text = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ."

        message_text = reported_message.text if reported_message.text else "(–º–µ–¥—ñ–∞-—Ñ–∞–π–ª)"
        reported_user_mention = f"<b>{reported_user.full_name}</b> (@{reported_user.username})"

        report_text = (
            f"‚ö†Ô∏è <b>–ù–æ–≤–∏–π —Ä–µ–ø–æ—Ä—Ç!</b>\n\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {reported_user_mention}\n"
            f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n<blockquote>{message_text}</blockquote>\n"
            f"{link_text}"
        )

        await query.message.edit_text("‚è≥–í—ñ–¥–ø—Ä–∞–≤–∫–∞...")

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        admins = await bot.get_chat_administrators(ADMIN_CHAT_ID)
        admin_mentions = [f"@{admin.user.username}" for admin in admins if admin.user.username]

        await bot.send_message(
            ADMIN_CHAT_ID, report_text,
            parse_mode=ParseMode.HTML,
            protect_content=True,
            disable_web_page_preview=True
        )

        if admin_mentions:
            half = len(admin_mentions) // 2
            await asyncio.sleep(4)
            await bot.send_message(ADMIN_CHAT_ID, "–ü–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞ –∞–¥–º—ñ–Ω—ñ–≤: " + " ".join(admin_mentions[:half]))
            await asyncio.sleep(4)
            await bot.send_message(ADMIN_CHAT_ID, "–î—Ä—É–≥–∞ —á–∞—Å—Ç–∏–Ω–∞ –∞–¥–º—ñ–Ω—ñ–≤: " + " ".join(admin_mentions[half:]))

        confirmed_reports.add(report_key)
        await query.message.edit_text("‚úÖ–†–µ–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π!")
        await log_action(f"‚úÖ –†–µ–ø–æ—Ä—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {query.from_user.full_name} ({query.from_user.id})")
    elif action == "cancel":
        await query.message.edit_text("‚ùå –†–µ–ø–æ—Ä—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        await log_action(f"‚ùå –†–µ–ø–æ—Ä—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {query.from_user.full_name} ({query.from_user.id})")

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø—ñ–Ω–≥—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
async def handle_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    
    if len(data) < 3:
        await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö!")
        return

    action = data[0]  # –î—ñ—è: ping

    if len(data) == 3:
        ping_answer = data[2]
        
        if ping_answer == "yes":
            await query.message.edit_text("‚è≥ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–ø–æ—Ä—Ç—É...")

            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
            admins = await bot.get_chat_administrators(ADMIN_CHAT_ID)
            admin_mentions = [f"@{admin.user.username}" for admin in admins if admin.user.username]

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–ø–æ—Ä—Ç —ñ –ø—ñ–Ω–≥
            await bot.send_message(ADMIN_CHAT_ID, "–†–µ–ø–æ—Ä—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", parse_mode=ParseMode.HTML)

            if admin_mentions:
                half = len(admin_mentions) // 2
                await asyncio.sleep(4)
                await bot.send_message(ADMIN_CHAT_ID, "–ü–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞ –∞–¥–º—ñ–Ω—ñ–≤: " + " ".join(admin_mentions[:half]))
                await asyncio.sleep(4)
                await bot.send_message(ADMIN_CHAT_ID, "–î—Ä—É–≥–∞ —á–∞—Å—Ç–∏–Ω–∞ –∞–¥–º—ñ–Ω—ñ–≤: " + " ".join(admin_mentions[half:]))

            await query.message.edit_text("‚úÖ –†–µ–ø–æ—Ä—Ç —ñ –ø—ñ–Ω–≥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ!")
        elif ping_answer == "no":
            await query.message.edit_text("‚ùå –†–µ–ø–æ—Ä—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑ –ø—ñ–Ω–≥—É.")
        else:
            await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø—ñ–Ω–≥.")
    else:
        await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –¥–ª—è –ø—ñ–Ω–≥—É.")

# –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —á–∞—Ç—É
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    await update.message.reply_text(f"üÜî ID —Ü—å–æ–≥–æ —á–∞—Ç—É: `{chat_id}`", parse_mode=ParseMode.MARKDOWN)

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context):
    message = update.message.text.lower()

    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ —É—á–∞—Å–Ω–∏–∫—ñ–≤, –Ω–µ –∑–∞–ø–∏—Å—É—é—á–∏ —ó—Ö –≤ –ª–æ–≥
    if message.startswith('/'):
        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî —Ü–µ –∫–æ–º–∞–Ω–¥–∞, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –≤ –ª–æ–≥
        await log_action(f"üí¨ –ö–æ–º–∞–Ω–¥–∞: {update.message.text} –≤—ñ–¥ {update.message.from_user.full_name} ({update.message.from_user.id})")
    elif "—Ä–∞—Ñ–∞" in message:
        response = random.choice(rafa_responses)
        await update.message.reply_text(response)
        await log_action(f"üí¨ –†–∞–§–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ {update.message.from_user.full_name} ({update.message.from_user.id})")
    elif "—Ä–∞—Ñ—É" in message:
        response = random.choice(rafu_responses)
        await update.message.reply_text(response)
        await log_action(f"üí¨ –†–∞–§—É –∫–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ {update.message.from_user.full_name} ({update.message.from_user.id})")
    elif "–ø–∏–Ω–≥" in message:
        await update.message.reply_text("–ê –Ω–∞—Ö—É—è –≤—ñ–Ω —Ç–æ–±—ñ?")
    elif "–Ω–µ–∫–æ" in message:
        admins = await bot.get_chat_administrators(ADMIN_CHAT_ID)
        if admins:
            random_admin = random.choice(admins)
            random_username = random_admin.user.username if random_admin.user.username else "unknown_user"
            sent_message = await update.message.reply_text("–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∏ –∑–∞ –∞–π–ø—ñüíª")
            await asyncio.sleep(5)
            await sent_message.edit_text(f"–ö–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–∞! –í–æ–Ω–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É @{random_username}")
            await log_action(f"üò∫ –ù–µ–∫–æ-–∫–æ–º–∞–Ω–¥–∞ –≤—ñ–¥ {update.message.from_user.full_name} ({update.message.from_user.id})")
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å!")
    else:
        # –Ø–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–µ –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –≤ –ª–æ–≥
        return

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø
    if update.message.from_user.id != USER_CHAT_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /send [chat_id] [—Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]")
        return

    chat_id = context.args[0]
    text = ' '.join(context.args[1:])

    try:
        await bot.send_message(chat_id=chat_id, text=text)
        await update.message.reply_text(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ {chat_id}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

# –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É /send
app.add_handler(CommandHandler("send", send_message))

# –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É /id
app.add_handler(CommandHandler("id", get_chat_id))

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    await send_welcome_message()

    app.add_handler(CommandHandler("id", get_chat_id))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("report", report_command))
    app.add_handler(CallbackQueryHandler(handle_report, pattern="^(confirm|cancel)_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await app.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
