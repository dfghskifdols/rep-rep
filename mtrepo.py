import nest_asyncio
import asyncio
import logging
import random
import re
from datetime import datetime, timezone, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from urllib.parse import urlparse
from telegram import CopyTextButton
import sqlite3
import pytz
import time
import aiopg
import asyncpg
import math
from pytz import timezone

bot_paused_until = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –Ω–∞–ø–∏—Å–∞–ª–∏ "–†–µ–ø–æ—Ä—Ç-–±–æ—Ç-–≤–æ–ø—Ä–æ—Å"
waiting_for_question = set()

nest_asyncio.apply()

REPORTS_PER_PAGE = 3
API_TOKEN = '7705193251:AAFrnXeNBgiFo3ZQsGNvEOa2lNzQPKo3XHM'
ADMIN_CHAT_ID = -1002651165474
USER_CHAT_ID = 5283100992
ALLOWED_USER_IDS = [5283100992, 5344318601]
LOG_CHAT_ID = -1002411396364
ALLOWED_USERS = [5283100992, 5713511759, 5344318601, 6340673182]
GROUP_ID = -1002268486160
LOG_CHATDEL_ID = -4665694960

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(API_TOKEN)
app = Application.builder().token(API_TOKEN).build()

# –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ "–†–∞–§–∞"
rafa_responses = [
    "<b>Blue_Nexus –∏–Ω–æ–≥–¥–∞ —Å—Ç–∞–µ—Ç –µ–±–ª–∞–Ω–æ–º</b>", 
    "<b>Blue_Nexus –¥–µ—Ä–∂–∞—Ç –≤ —Ä–∞–±—Å—Ç–≤–µ</b>",  
    "<b>Blue_Nexus –∞–±–∞–∂–∞–µ—Ç —á–∞—Ç –≥–ø—Ç</b>",
    "<b>–ö–∏—Ä–∏—á –ª—é–±–∏—Ç –∞–Ω–∏–º–µ-—Ç—è–Ω–æ–∫... –Ω–æ –≤ –∂–∏–∑–Ω–∏ –¥–µ–≤—É—à–µ–∫ –æ–Ω –Ω–µ –ª—é–±–∏—Ç</b>", 
    "<b>–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ö–∏—Ä–∏—á —Å–æ–∑–¥–∞–≤–∞–ª –∫–∞–Ω–∞–ª –ø—Ä–æ —Å–≤–æ—é –∂–∏–∑–Ω—å</b>", 
    "<b>–ö–∏—Ä–∏—á –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π</b>",
    "<b>Freezee - —É—Å–ø–µ—Ö —É—Å–ø–µ—à–Ω—ã–π</b>", 
    "<b>Freezee - –∞–Ω—Ç–∏–ø–∞—Ü–∏—Ñ–∏—Å—Ç‚òÆ</b>", 
    "<b>Freezee –ø–æ—Ö—É–∏—Å—Ç –ø–æ –∂–∏–∑–Ω–∏</b>",
    "<b>Vipsii - –¥–æ–ª–±–∞–µ–±</b>", 
    "<b>Vipsii —Å–ª–∏—à–∫–æ–º –≥–ª—É–ø—ã–π</b>", 
    "<b>–¢—Ä–µ—Ç–∏–π —Ñ–∞–∫—Ç –ø—Ä–æ —Å–µ–±—è Vipsii –∑–∞–±—ã–ª</b>", 
    "<b>Exponnentik - –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å —á–∞—è</b>", 
    "<b>Exponnentik –¥–µ—Ä–∂–∏—Ç —á–µ—Ä–∏ –≤ –∑–∞–ª–æ–∂–Ω–∏–∫–∞—Ö</b>", 
    "<b>Exponnentik –≥–ª–∞–≤–Ω—ã–π –ø—É–ø—Å –∫–∏—Ä–∏—á–∞(–∫–∏—Ä–∏—á —ç—Ç–æ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç)</b>",
    "<b>–†–∞–§–∞ - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –†–∞–Ω–¥–æ–º –§–∞–∫—Ç –ø—Ä–æ –ê–Ω–¥–º–∏–Ω–æ–≤</b>"
]
  
# –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è "–†–∞–§—É"
rafu_responses = [
    "<b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç! SsVladiSlaveSs –Ω–µ –∑–Ω–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–∫—Ç</b>", 
    "<b>–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ @khvtg –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã–π –∏–≥—Ä–æ–∫, —Ö–æ—Ä–æ—à–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —â–µ–¥—Ä—ã–π —Å–æ–≥–∏–ª—å–¥–∏–µ—Ü –∏ –∫—Ä—É—Ç–æ–π –¥–∏–∑–∞–π–Ω–µ—Ä ‚Äì –æ–Ω –µ—â–µ –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Å–∫—Ä–æ–º–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å</b>", 
    "<b>#–•–∞—é—à#–ë–æ–π.#—Ç–≤–∏–∫–∞—Ç#Not –•–æ—á–µ—Ç —É–º–µ—Ä–µ—Ç—å –æ—Ç —Å–≤–æ–µ–π –¥—É—à–∏</b>",
    "<b>–ë–æ–º–±–∞–±–æ—Ç –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ –±–æ—Çüôà</b>",
    "<b>–û –ø—É—à–æ—á–∫–µ: 11 –ª–µ—Ç, –≥–µ–π, –∏—â–µ—Ç –∂–µ–Ω—É</b>",
    "<b>–ù–∏–Ω–¥–∑—è - –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ—Ä</b>",
    "<b>–¢–∏—Ö–∏–π_–°–æ–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –º–∏—Ä–∞–∂ –æ—Å—Ç—Ä–æ–≤ –∏ –Ω–∞ –Ω–µ–º —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É –¥–ª—è –≤4 —Ä–∞—Å –≤ –±–ª–æ–∫—Å —Ñ—Ä—É–∫—Ç</b>",
    "<b>Vloger –ø—Ä–æ —Å–µ–±—è: —è —Å—Ç—É–¥–µ–Ω—Ç –∏ –æ—á–µ–Ω—å —Ç–∞—â—É—Å –ø–æ –∞–Ω–∏–º–µ —Ç—è–Ω–∫–∞–º –Ω–æ –≤ —Ä–∏–ª–µ –¥–µ–≤—É—à–µ–∫ –±–æ—é—Å—å</b>",
    "<b>StrazhTellOffichal –û—á–µ–Ω—å –ª—é–±–∏—Ç –Æ–Ω–∏, —á—Ç–æ –æ–Ω –¥–∞–∂–µ —Å–æ–∑–¥–∞–ª —Å–≤–æ–π –∫—É–ª—å—Ç –ø–æ —Å–≤–æ–µ–π –ª—é–±–∏–º–æ–π –∫–æ—à–∫–µ Uni Cat</b>",
    "<b>Mapc - –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π Python-–∞–π—Ç–∏—à–Ω–∏–∫ —Å –±–æ–ª—å—à–∏–º —Å—Ç–∞–∂–æ–º –≤–∞–ª—è–Ω–∏—è –Ω–∞ –∫—Ä–æ–≤–∞—Ç–∏... –Ω–∞–∫–æ—Ä–º–∏—Ç–µ –µ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞</b>",
    "<b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –≤—Å—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è ‚Äî —ç—Ç–æ –ø–æ–¥–≤–∞–ª, –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî danyagreench.</b>",
    "<b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç, SsVladiSlaveSs —ç—Ç–æ SsVladiSlaveSs</b>",
    "<b>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ª—é–±–∏—Ç –∫–æ—Ç–∏–∫–æ–≤</b>",
    "<b>–ü—Ä–æ—Å—Ç–æ —á–µ–ª - –≥–µ–π</b>",
    "<b>–ö–æ—Ç –∞–Ω–∞–Ω–∞—Å —Å—Ç–∞–ª –∞–Ω–∞–Ω–∞—Å–æ–º –∫–æ–≥–¥–∞ –Ω–∞ –µ–≥–æ –≥–æ–ª–æ–≤—É —Å–≤–∞–ª–∏–ª—Å—è –∞–Ω–∞–Ω–∞—Å</b>",
    "<b>üêç…•…•∆é –æ—á–µ–Ω—å –±–æ–∏—Ç—Å—è —Å–æ–±–∞–∫</b>",
    "<b>–£ –õ—é—Ü–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è —ç–∫–∑–∞–º–µ–Ω</b>",
    "<b>–†–∞–§—É - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –†–ê–Ω–¥–æ–º –§–∞–∫—Ç –ø—Ä–æ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>"
]

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∏—á–∏–Ω—ã —Ä–µ–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü1.3", "–ø1.3")
REPORT_REASON_REGEX = re.compile(r"^–ø\d+\.\d+$", re.IGNORECASE)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ –≥—Ä—É–ø–ø—É
async def log_action(text: str):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ª–æ–≥-–≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª
        await bot.send_message(LOG_CHAT_ID, text, parse_mode=ParseMode.HTML)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
async def bot_stop(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    if user_id in ALLOWED_USER_IDS:
        try:
            minutes = int(context.args[0])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            stop_time = time.time() + minutes * 60  # –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            await update.message.reply_text(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
            
            # –ñ–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
            await asyncio.sleep(minutes * 60)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            await update.message.reply_text("–ë–æ—Ç —Å–Ω–æ–≤–∞ –∑–∞–ø—É—â–µ–Ω.")
        except (IndexError, ValueError):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö). –ü—Ä–∏–º–µ—Ä: /bot_stop 5")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –í–∫–∞–∑—É—î–º–æ –ú–æ—Å–∫–æ–≤—Å—å–∫–∏–π —á–∞—Å
moscow_tz = timezone('Europe/Moscow')

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL
async def connect_db():
    return await asyncpg.connect(
        dsn='postgresql://neondb_owner:npg_PXgGyF7Z5MUJ@ep-shy-feather-a2zlgfcw-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require'
    )

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
async def get_reports(page=1, reports_per_page=3):
    conn = await connect_db()
    offset = (page - 1) * reports_per_page
    rows = await conn.fetch(''' 
        SELECT * FROM user_reports
        ORDER BY report_date DESC
        LIMIT $1 OFFSET $2
    ''', reports_per_page, offset)
    await conn.close()
    return rows

# –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–ø–æ—Ä—Ç—ñ–≤
async def get_total_reports():
    conn = await connect_db()
    total_reports = await conn.fetchval('SELECT COUNT(*) FROM user_reports')
    await conn.close()
    return total_reports

# –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–ø–æ—Ä—Ç–∏
async def show_reports(update, context, page=1):
    user_id = (
        update.effective_user.id if update.effective_user else None
    )

    if user_id not in ALLOWED_USERS:
        if update.message:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ.")
        else:
            await update.callback_query.answer("‚õî –¢–µ–±–µ –Ω–µ–ª—å–∑—è", show_alert=True)
        return

    reports = await get_reports(page)
    total_reports = await get_total_reports()
    total_pages = math.ceil(total_reports / 3)

    if not reports:
        if update.message:
            await update.message.reply_text("–ù–µ—Ç—É —Ä–µ–ø–æ—Ä—Ç–æ–≤.")
        else:
            await update.callback_query.message.reply_text("–ù–µ—Ç—É —Ä–µ–ø–æ—Ä—Ç–æ–≤")
        return

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑—É
    message_text = "–°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤:\n\n"
    for report in reports:
        message_text += f"–ö–ª—é—á —Ä–µ–ø–æ—Ä—Ç–∞: {report['report_key']}\n"
        message_text += f"ID —é–∑–µ—Ä–∞: {report['user_id']}\n"
        message_text += f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {report['message_id']}\n"
        message_text += f"–¢–æ—Ç –∫—Ç–æ –∫–∏–Ω—É–ª —Ä–µ–ø–æ—Ä—Ç: {report['reporter_name']}\n"
        message_text += f"–¢–æ—Ç –Ω–∞ –∫–æ–≥–æ –∫–∏–Ω—É–ª–∏ —Ä–µ–ø–æ—Ä—Ç: {report['reported_name']}\n"
        message_text += f"–°—Å—ã–ª–∫–∞: {report['message_link']}\n"
        message_text += f"–í—Ä–µ–º—è: {report['report_time']}\n"
        message_text += f"–¢–µ–∫—Å—Ç: {report['reported_text']}\n\n"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard = []
    buttons = []
    if page > 1:
        buttons.append(InlineKeyboardButton("‚Üê", callback_data=f"page_{page - 1}"))

    buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))

    if page < total_pages:
        buttons.append(InlineKeyboardButton("‚Üí", callback_data=f"page_{page + 1}"))

    keyboard.append(buttons)
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    if update.message:
        print(f"Replying with message: {message_text}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    else:
        print(f"Editing message: {message_text}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        await update.callback_query.message.edit_text(
            message_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )

async def button(update, context):
    query = update.callback_query
    data = query.data

    if data.startswith("page_"):
        page = int(data.split("_")[1])
        await show_reports(update, context, page=page)
        await query.answer()

    print("test")

# –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
async def save_report(user_id, message_id, reason, reporter_name, reported_name, message_link, reported_text, report_date):
    conn = await connect_db()
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –ú–°–ö
    report_time = datetime.now(moscow_tz).replace(tzinfo=None)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è report_key –Ω–∞ –æ—Å–Ω–æ–≤—ñ user_id —Ç–∞ message_id
    report_key = f"{user_id}_{message_id}"

    # –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π —Ä–µ–ø–æ—Ä—Ç –∑ —É—Å—ñ–º–∞ –¥–∞–Ω–∏–º–∏ –≤ —Ç–∞–±–ª–∏—Ü—é
    await conn.execute('''
        INSERT INTO user_reports (report_key, user_id, message_id, reporter_name, reported_name, message_link, report_time, reported_text, report_date)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
    ''', report_key, user_id, message_id, reporter_name, reported_name, message_link, report_time, reported_text, report_date)

    await conn.close()

confirmed_reports = set()

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–ø–æ—Ä—Ç—É
async def report_command(update: Update, context: CallbackContext):
    if not update.message.reply_to_message:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–†–µ–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ <i>–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>!</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ä–µ–ø–æ—Ä—Ç–∞: <code>/report –ü1.3</code>",
            parse_mode=ParseMode.HTML
        )
        return

    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ —Ä–µ–ø–æ—Ä—Ç–∞!</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ä–µ–ø–æ—Ä—Ç–∞: <code>/report –ü1.3</code>",
            parse_mode=ParseMode.HTML
        )
        return

    reason = context.args[0]
    message = update.message  # –æ—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ update
    message_id = update.message.reply_to_message.message_id
    user_id = update.message.from_user.id
    report_key = f"{user_id}_{message_id}"
    reporter_name = update.message.from_user.full_name
    reported_name = update.message.reply_to_message.from_user.full_name
    message_link = f"https://t.me/{update.message.chat.username}/{message_id}"
    report_time = update.message.date
    reported_text = update.message.reply_to_message.text

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î forward_date —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, —è–∫—â–æ –Ω–µ–º–∞—î - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ date
    report_date = message.forward_date if hasattr(message, 'forward_date') else message.date
    report_date = report_date.replace(tzinfo=None)

    if report_key in confirmed_reports:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
        return

    keyboard = [[
        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{user_id}_{message_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_{user_id}_{message_id}")
    ]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π <b>{reason}</b>?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
    await log_action(f"üìå –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª {update.message.from_user.full_name} ({user_id}) —Å –ø—Ä–∏—á–∏–Ω–æ–π {reason}")
    await save_report(user_id, message_id, reason, reporter_name, reported_name, message_link, reported_text, report_date)

# –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ä–µ–ø–æ—Ä—Ç—É
async def handle_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    data = query.data.split("_")
    if len(data) < 3:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return

    action = data[0]
    try:
        user_id = int(data[1])
        message_id = int(data[2])
    except ValueError:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞!")
        return

    if query.from_user.id != user_id:
        await query.answer(text="‚ùå –ù–µ–ª—å–∑—è –∂–º—è–∫–∞—Ç—å —á—É–∂–∏–µ —Ä–µ–ø–æ—Ä—Ç—ã!", show_alert=True)
        return

    report_key = f"{user_id}_{message_id}"
    if report_key in confirmed_reports:
        await query.answer(text="‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)
        return

    if action == "confirm":
        reported_message = query.message.reply_to_message
        reported_user = reported_message.from_user

        if query.message.chat.username:
            message_link = f"https://t.me/{query.message.chat.username}/{reported_message.message_id}"
            link_text = f"<a href='{message_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>"
        else:
            link_text = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

        message_text = reported_message.text if reported_message.text else "(–º–µ–¥–∏–∞-—Ñ–∞–π–ª)"
        reported_user_mention = f"<b>{reported_user.full_name}</b> (@{reported_user.username})"

        report_text = (
            f"<blockquote>‚ö†Ô∏è <b>–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç!</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {reported_user_mention}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<blockquote>{message_text}</blockquote>\n</blockquote>"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {link_text}"
        )

        await query.message.edit_text("‚è≥–û—Ç–ø—Ä–∞–≤–∫–∞...")

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await bot.get_chat_administrators(ADMIN_CHAT_ID)
        admin_mentions = [f"@{admin.user.username}" for admin in admins if admin.user.username]

        await bot.send_message(
            ADMIN_CHAT_ID, report_text,
            parse_mode=ParseMode.HTML,
            protect_content=True,
            disable_web_page_preview=True
        )

        if admin_mentions:
            half = len(admin_mentions) // 2
            await asyncio.sleep(4)
            await bot.send_message(ADMIN_CHAT_ID, "–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –∞–¥–º–∏–Ω–æ–≤: " + " ".join(admin_mentions[:half]))
            await asyncio.sleep(4)
            await bot.send_message(ADMIN_CHAT_ID, "–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –∞–¥–º–∏–Ω–æ–≤: " + " ".join(admin_mentions[half:]))

        confirmed_reports.add(report_key)
        await query.message.edit_text("‚úÖ–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        await log_action(f"‚úÖ –†–µ–ø–æ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.full_name} ({query.from_user.id})")
    elif action == "cancel":
        await query.message.edit_text("‚ùå –†–µ–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        await log_action(f"‚ùå –†–µ–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.full_name} ({query.from_user.id})")

async def command_handler(update: Update, context):
    global stop_time
    if stop_time is not None and time.time() < stop_time:
        await update.message.reply_text("–ë–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –∑—É–ø–∏–Ω–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return 

# –§—É–Ω–∫—Ü–∏—è –æ–¥–µ—Ä–∂–∞–Ω–∏—è ID —á–∞—Ç—É
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    # –Æ–∑–∞–µ–º InlineKeyboardButton –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID
    button = InlineKeyboardButton(text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", copy_text=CopyTextButton(text=chat_id))
    keyboard = [[button]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}", parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

# –û–±—Ä–æ–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Copy ID
async def handle_copy_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.data.split('_')[1]
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å

# –ö–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ
    await query.edit_message_text(f"‚úÖ ID —á–∞—Ç–∞: {chat_id} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async def wait_for_response(user_id: int, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    await asyncio.sleep(120)  # 2 —Ö–≤–∏–ª–∏–Ω–∏
    if user_id in waiting_for_question:
        waiting_for_question.remove(user_id)
        try:
            await context.bot.send_message(chat_id=chat_id, text="‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ï—Å–ª–∏ —Ö–æ—á–µ—à –ø–æ–ø—Ä–æ–±—ã–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ - –Ω–∞–ø–∏—à–∏ '–†–µ–ø–æ—Ä—Ç-–±–æ—Ç-–≤–æ–ø—Ä–æ—Å'")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ —Ç–æ —á—Ç–æ –≤—Ä–µ–º—è –≤—ã—à–ª–æ: {e}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()
    user_id = update.message.from_user.id

    if message.lower() == "—Ä–±–≤":
        if user_id not in waiting_for_question:
            waiting_for_question.add(user_id)
            await update.message.reply_text("–°–ª—É—à–∞—é!")
            asyncio.create_task(wait_for_response(user_id, update.message.chat_id, context))
        else:
            await update.message.reply_text("‚è≥ –Ø —É–∂–µ –∂–¥—É –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ!")
        return

    if user_id in waiting_for_question:
        waiting_for_question.remove(user_id)
        admin_id = 5283100992  # –¢–≤—ñ–π Telegram ID
        try:
            await context.bot.send_message(chat_id=admin_id, text=f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å @{update.message.from_user.username or update.message.from_user.first_name}:\n\n{message}")
            await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await update.message.reply_text("‚ùå –°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return

    if message.lower() == "–Ω–µ–∫–æ":
        admins = await context.bot.get_chat_administrators(ADMIN_CHAT_ID)
        if admins:
            random_admin = random.choice(admins)
            random_username = random_admin.user.username if random_admin.user.username else "unknown_user"
            sent_message = await update.message.reply_text("–≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∏ –ø–æ –∞–π–ø–∏üíª")
            await asyncio.sleep(5)
            await sent_message.edit_text(f"–ö–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∞! –û–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É @{random_username}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π!")

    elif message.lower() == "–ü–∏–Ω–≥".lower():
        await update.message.reply_text("–ê –Ω–∞—Ö—É—è –æ–Ω —Ç–µ–±–µ?")

    elif message.lower() == "–†–∞–§–∞".lower():
        response = random.choice(rafa_responses)
        await update.message.reply_text(f"<b>{response}</b>", parse_mode=ParseMode.HTML)
    
    elif message.lower() == "–†–∞–§—É".lower():
        response = random.choice(rafu_responses)
        await update.message.reply_text(response, parse_mode=ParseMode.HTML)

    elif message.lower() == "–ø—Ä–∏–≤–µ—Ç".lower():  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ "–ø—Ä–∏–≤–µ—Ç" –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        current_time = datetime.now(timezone.utc) + timedelta(hours=3)
        hour = current_time.hour

        if 5 <= hour < 7:
            response = "–ê —Ç—ã —Å–ø–∞—Ç—å –Ω–µ —Ö–æ—á–µ—à—å?"
        elif 7 <= hour < 13:
            response = "–î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞!"
        elif 13 <= hour < 17:
            response = "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
        elif 17 <= hour < 22:
            response = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞!"
        else:
            response = "–ê –Ω—É –∫–∞ —Å–ø–∞—Ç—å!"

        await update.message.reply_text(response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.message.from_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send [chat_id] [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]")
        return

    chat_id = context.args[0]
    text = ' '.join(context.args[1:])

    try:
        sent_message = await bot.send_message(chat_id=chat_id, text=text)
        message_link = f"https://t.me/c/{str(chat_id).replace('-100', '')}/{sent_message.message_id}"
        log_text = (f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
                    f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {update.message.from_user.full_name} ({update.message.from_user.id})\n"
                    f"üìç –í —á–∞—Ç: {chat_id}\n"
                    f"üí¨ –¢–µ–∫—Å—Ç: {text}\n"
                    f"üîó <a href='{message_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</a>")
        await log_action(log_text)
        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ /report –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /send
app.add_handler(CommandHandler("send", send_message))

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /id
app.add_handler(CommandHandler("id", get_chat_id))

app.add_handler(CommandHandler("show_reports", show_reports))
app.add_handler(CallbackQueryHandler(button, pattern="^page_\d+$"))

app.add_handler(CommandHandler("bot_stop", bot_stop))

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("report", report_command))
app.add_handler(CallbackQueryHandler(handle_report, pattern="^(confirm|cancel)_\d+_\d+$"))
app.add_handler(MessageHandler(filters.Chat(GROUP_ID) & filters.TEXT, handle_message))
app.add_handler(CallbackQueryHandler(handle_copy_id, pattern="^copy_"))

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")

    # –ó–∞–ø—É—Å–∫ polling —ñ —Ñ–æ–Ω–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
    await asyncio.gather(app.run_polling())

if __name__ == "__main__":
    asyncio.run(main())
